/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page", {
  /***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faluaorazbek%2FDesktop%2Fcharts%2Fsrc%2Fcomponents%2Fline-chart.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!":
    /*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faluaorazbek%2FDesktop%2Fcharts%2Fsrc%2Fcomponents%2Fline-chart.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false! ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
    /***/ function (
      __unused_webpack_module,
      __unused_webpack_exports,
      __webpack_require__,
    ) {
      eval(
        __webpack_require__.ts(
          'Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./src/components/line-chart.tsx */ "(app-pages-browser)/./src/components/line-chart.tsx", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZhbHVhb3JhemJlayUyRkRlc2t0b3AlMkZjaGFydHMlMkZzcmMlMkZjb21wb25lbnRzJTJGbGluZS1jaGFydC50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlMjJkZWZhdWx0JTIyJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsOExBQWlJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ODE2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiwgd2VicGFja0V4cG9ydHM6IFtcImRlZmF1bHRcIl0gKi8gXCIvVXNlcnMvYWx1YW9yYXpiZWsvRGVza3RvcC9jaGFydHMvc3JjL2NvbXBvbmVudHMvbGluZS1jaGFydC50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Faluaorazbek%2FDesktop%2Fcharts%2Fsrc%2Fcomponents%2Fline-chart.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&server=false!\n',
        ),
      );

      /***/
    },

  /***/ "(app-pages-browser)/./src/components/line-chart.tsx":
    /*!***************************************!*\
  !*** ./src/components/line-chart.tsx ***!
  \***************************************/
    /***/ function (module, __unused_webpack_exports, __webpack_require__) {
      eval(
        __webpack_require__.ts(
          "/* __next_internal_client_entry_do_not_use__  auto */  // import React, { useMemo } from 'react'\n // import { extent } from 'd3-array'\n // import { timeFormat } from 'd3-time-format'\n // import { AxisBottom, AxisRight } from '@visx/axis'\n // import { LinePath } from '@visx/shape'\n // import { Group } from '@visx/group'\n // import { scaleLinear, scaleTime } from '@visx/scale'\n // import { GridRows } from \"@visx/grid\";\n // import { curveLinear } from '@visx/curve'\n // import { data } from '../data/line-chart'\n // import { getDimensions, xAccessor, yAccessor } from '#/utils/line-chart'\n // type Props = {\n //   width: number\n //   height: number\n // }\n // function LineChart({ width, height }: Props) {\n //   const { margin, boundedWidth, boundedHeight } = getDimensions({\n //     width,\n //     height,\n //   })\n //   const LpYValue = 54300.2; \n //   const LatestValue = 59980.9;\n //   const xScale = useMemo(\n //     () =>\n //       scaleTime<number>({\n //         domain: extent(data, xAccessor) as [Date, Date],\n //         range: [0, boundedWidth],\n //         nice: true,\n //       }),\n //     [boundedWidth]\n //   )\n //   const yScale = useMemo(\n //     () =>\n //       scaleLinear<number>({\n //         domain: extent(data, yAccessor) as [number, number],\n //         range: [boundedHeight, 0],\n //         nice: true,\n //       }),\n //     [boundedHeight]\n //   )\n //   const customYPosition = yScale(LpYValue); \n //   // Generate y-axis tick values and ensure both LpYValue and LatestValue are included\n //   const yTickValues = yScale.ticks(8);\n //   if (!yTickValues.includes(LpYValue)) {\n //     yTickValues.push(LpYValue);\n //   }\n //   if (!yTickValues.includes(LatestValue)) {\n //     yTickValues.push(LatestValue);\n //   }\n //   return (\n //     <div className=\"w-fit\">\n //       <svg\n //         className=''\n //         width={width}\n //         height={height}\n //         role=\"figure\"\n //       >\n //         <rect\n //             x={0}\n //             y={0}\n //             width={width}\n //             height={height}\n //         />\n //         <title>line chart looking at the distribution of max temperature</title>\n //         <Group top={margin.top} left={margin.left}>\n //           <GridRows\n //             scale={yScale}\n //             width={boundedWidth}\n //             strokeDasharray=\"1,3\"\n //             stroke=\"#262626\"\n //             pointerEvents=\"none\"\n //           />\n //           <LinePath\n //             curve={curveLinear}\n //             data={data}\n //             stroke={\"#FFCA43\"}\n //             strokeWidth={1.5}\n //             x={(d) => xScale(xAccessor(d)) ?? 0}\n //             y={(d) => yScale(yAccessor(d)) ?? 0}\n //           />\n //           {customYPosition && (\n //             <line\n //               x1={0}\n //               x2={boundedWidth}\n //               y1={customYPosition}\n //               y2={customYPosition}\n //               stroke=\"white\"\n //               strokeWidth={1}\n //               strokeDasharray=\"3,5\" \n //             />\n //           )}\n //           <AxisRight\n //             left={boundedWidth + margin.right - 40}\n //             scale={yScale}\n //             top={0}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             labelOffset={0}\n //             tickValues={yTickValues}\n //             tickFormat={(value) => `${Number(value).toFixed(1)}`} \n //             tickLabelProps={() => ({\n //               fill: '#A6A6A6',\n //               fontSize: 9,\n //               textAnchor: 'start',\n //             })}\n //             tickComponent={({ formattedValue, x, y }) => {\n //               if (formattedValue === undefined) {\n //                 return null; \n //               }\n //               const numFormattedValue = Number(formattedValue); \n //               const isLPValue = numFormattedValue === LpYValue;\n //               const isLatestValue = numFormattedValue === LatestValue;\n //               const text = isLPValue\n //                 ? `LP ${LpYValue.toFixed(1)}`\n //                 : isLatestValue\n //                 ? `${LatestValue.toFixed(1)}`\n //                 : formattedValue;\n //               const paddingX = 8; \n //               const paddingY = 2; \n //               const fontSize = 9;\n //               const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n //               const rectWidth = textWidth + paddingX; // Add padding for width\n //               const rectHeight = fontSize + paddingY; // Add padding for height\n //               if (isLPValue) {\n //                 return (\n //                   <g transform={`translate(${x},${y})`}>\n //                     <rect\n //                       x={-rectWidth / 2} \n //                       y={-rectHeight / 2}\n //                       width={rectWidth}\n //                       height={rectHeight}\n //                       fill=\"#4d4d4d\"\n //                       rx={0} \n //                     />\n //                     <text\n //                       fill=\"white\"\n //                       fontSize={fontSize}\n //                       textAnchor=\"middle\"\n //                       dy=\"0.32em\"\n //                       x={0} \n //                     >\n //                       LP {LpYValue.toFixed(1)}\n //                     </text>\n //                   </g>\n //                 );\n //               } else if (isLatestValue) {\n //                 return (\n //                   <g transform={`translate(${x},${y})`}>\n //                     <rect\n //                       x={-rectWidth / 2} \n //                       y={-rectHeight / 2}\n //                       width={rectWidth}\n //                       height={rectHeight}\n //                       fill=\"white\"\n //                       rx={0} \n //                     />\n //                     <text\n //                       fill=\"black\"\n //                       fontWeight=\"700\"\n //                       fontSize={fontSize}\n //                       textAnchor=\"middle\"\n //                       dy=\"0.32em\"\n //                       x={0}\n //                     >\n //                       {LatestValue.toFixed(1)}\n //                     </text>\n //                   </g>\n //                 );\n //               } else {\n //                 return (\n //                   <text\n //                     fill=\"#A6A6A6\"\n //                     fontSize={fontSize}\n //                     textAnchor=\"start\"\n //                     dy=\"0.32em\"\n //                     x={-10}\n //                     y={y}\n //                   >\n //                     {text}\n //                   </text>\n //                 );\n //               }\n //             }}\n //           />\n //           <AxisBottom\n //             rangePadding={41}\n //             top={boundedHeight}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             scale={xScale}\n //             tickFormat={(d) => {\n //               return d instanceof Date ? timeFormat('%H:%M')(d) : '';\n //             }}\n //             tickLabelProps={() => ({\n //               fill: 'white',\n //               fontSize: 8,\n //               textAnchor: 'middle',\n //             })}\n //           />\n //         </Group>\n //       </svg>\n //     </div>\n //   )\n // }\n // export { LineChart }\n // 'use client'\n // import React, { useMemo, useCallback } from 'react';\n // import { extent, bisector, max, min } from 'd3-array';\n // import { timeFormat } from 'd3-time-format';\n // import { AxisBottom, AxisRight } from '@visx/axis';\n // import { LinePath } from '@visx/shape';\n // import { Group } from '@visx/group';\n // import { scaleLinear, scaleTime } from '@visx/scale';\n // import { GridRows } from '@visx/grid';\n // import { curveLinear } from '@visx/curve';\n // import { useTooltip, TooltipWithBounds } from '@visx/tooltip';\n // import { localPoint } from '@visx/event';\n // import { data } from '../data/line-chart';\n // import { getDimensions, xAccessor, yAccessor } from '#/utils/line-chart';\n // type Props = {\n //   width: number;\n //   height: number;\n // };\n // function LineChart({ width, height }: Props) {\n //   const { margin, boundedWidth, boundedHeight } = getDimensions({\n //     width,\n //     height,\n //   });\n //   const LpYValue = 54300.2;\n //   const LatestValue = 59980.9;\n //   const xScale = useMemo(\n //     () =>\n //       scaleTime<number>({\n //         domain: extent(data, xAccessor) as [Date, Date],\n //         range: [0, boundedWidth],\n //         nice: true,\n //       }),\n //     [boundedWidth]\n //   );\n //   const yScale = useMemo(\n //     () =>\n //       scaleLinear<number>({\n //         domain: extent(data, yAccessor) as [number, number],\n //         range: [boundedHeight, 0],\n //         nice: true,\n //       }),\n //     [boundedHeight]\n //   );\n //   const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } = useTooltip();\n //   const handleTooltip = useCallback(\n //     (event: React.MouseEvent) => {\n //       const { x } = localPoint(event) || { x: 0 };\n //       const x0 = xScale.invert(x - margin.left); // Get the date from x position\n //       const bisectDate = bisector(xAccessor).left;\n //       const index = bisectDate(data, x0, 1);\n //       const d0 = data[index - 1];\n //       const d1 = data[index];\n //       const d = x0 - xAccessor(d0) > xAccessor(d1) - x0 ? d1 : d0; // Get closest data point\n //       showTooltip({\n //         tooltipData: d,\n //         tooltipLeft: xScale(xAccessor(d)),\n //         tooltipTop: yScale(yAccessor(d)),\n //       });\n //     },\n //     [xScale, yScale, showTooltip]\n //   );\n //   const customYPosition = yScale(LpYValue);\n //   const yTickValues = yScale.ticks(8);\n //   if (!yTickValues.includes(LpYValue)) yTickValues.push(LpYValue);\n //   if (!yTickValues.includes(LatestValue)) yTickValues.push(LatestValue);\n //   return (\n //     <div className=\"w-fit\">\n //       <svg className=\"\" width={width} height={height} role=\"figure\">\n //         <rect x={0} y={0} width={width} height={height} />\n //         <Group top={margin.top} left={margin.left}>\n //           <GridRows\n //             scale={yScale}\n //             width={boundedWidth}\n //             strokeDasharray=\"1,3\"\n //             stroke=\"#262626\"\n //             pointerEvents=\"none\"\n //           />\n //           <LinePath\n //             curve={curveLinear}\n //             data={data}\n //             stroke={'#FFCA43'}\n //             strokeWidth={1.5}\n //             x={(d) => xScale(xAccessor(d)) ?? 0}\n //             y={(d) => yScale(yAccessor(d)) ?? 0}\n //           />\n //           {customYPosition && (\n //             <line\n //               x1={0}\n //               x2={boundedWidth}\n //               y1={customYPosition}\n //               y2={customYPosition}\n //               stroke=\"white\"\n //               strokeWidth={1}\n //               strokeDasharray=\"3,5\"\n //             />\n //           )}\n //           <AxisRight\n //             left={boundedWidth + margin.right - 40}\n //             scale={yScale}\n //             top={0}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             tickValues={yTickValues}\n //             tickFormat={(value) => `${Number(value).toFixed(1)}`}\n //             tickLabelProps={() => ({\n //               fill: '#A6A6A6',\n //               fontSize: 9,\n //               textAnchor: 'start',\n //             })}\n //             tickComponent={({ formattedValue, x, y }) => {\n //                             if (formattedValue === undefined) {\n //                               return null; \n //                             }\n //                             const numFormattedValue = Number(formattedValue); \n //                             const isLPValue = numFormattedValue === LpYValue;\n //                             const isLatestValue = numFormattedValue === LatestValue;\n //                             const text = isLPValue\n //                               ? `LP ${LpYValue.toFixed(1)}`\n //                               : isLatestValue\n //                               ? `${LatestValue.toFixed(1)}`\n //                               : formattedValue;\n //                             const paddingX = 8; \n //                             const paddingY = 2; \n //                             const fontSize = 9;\n //                             const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n //                             const rectWidth = textWidth + paddingX; // Add padding for width\n //                             const rectHeight = fontSize + paddingY; // Add padding for height\n //                             if (isLPValue) {\n //                               return (\n //                                 <g transform={`translate(${x},${y})`}>\n //                                   <rect\n //                                     x={-rectWidth / 2} \n //                                     y={-rectHeight / 2}\n //                                     width={rectWidth}\n //                                     height={rectHeight}\n //                                     fill=\"#4d4d4d\"\n //                                     rx={0} \n //                                   />\n //                                   <text\n //                                     fill=\"white\"\n //                                     fontSize={fontSize}\n //                                     textAnchor=\"middle\"\n //                                     dy=\"0.32em\"\n //                                     x={0} \n //                                   >\n //                                     LP {LpYValue.toFixed(1)}\n //                                   </text>\n //                                 </g>\n //                               );\n //                             } else if (isLatestValue) {\n //                               return (\n //                                 <g transform={`translate(${x},${y})`}>\n //                                   <rect\n //                                     x={-rectWidth / 2} \n //                                     y={-rectHeight / 2}\n //                                     width={rectWidth}\n //                                     height={rectHeight}\n //                                     fill=\"white\"\n //                                     rx={0} \n //                                   />\n //                                   <text\n //                                     fill=\"black\"\n //                                     fontWeight=\"700\"\n //                                     fontSize={fontSize}\n //                                     textAnchor=\"middle\"\n //                                     dy=\"0.32em\"\n //                                     x={0}\n //                                   >\n //                                     {LatestValue.toFixed(1)}\n //                                   </text>\n //                                 </g>\n //                               );\n //                             } else {\n //                               return (\n //                                 <text\n //                                   fill=\"#A6A6A6\"\n //                                   fontSize={fontSize}\n //                                   textAnchor=\"start\"\n //                                   dy=\"0.32em\"\n //                                   x={-10}\n //                                   y={y}\n //                                 >\n //                                   {text}\n //                                 </text>\n //                               );\n //                             }\n //                           }}\n //           />\n //           <AxisBottom\n //             rangePadding={41}\n //             top={boundedHeight}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             scale={xScale}\n //             tickFormat={(d) => (d instanceof Date ? timeFormat('%H:%M')(d) : '')}\n //             tickLabelProps={() => ({\n //               fill: 'white',\n //               fontSize: 8,\n //               textAnchor: 'middle',\n //             })}\n //           />\n //           <rect\n //             x={0}\n //             y={0}\n //             width={boundedWidth}\n //             height={boundedHeight}\n //             fill=\"transparent\"\n //             onMouseMove={handleTooltip}\n //             onMouseLeave={() => hideTooltip()}\n //           />\n //         </Group>\n //         {tooltipData && (\n //           <circle\n //             cx={tooltipLeft}\n //             cy={tooltipTop}\n //             r={5}\n //             stroke=\"black\"\n //             fill=\"#ffcb8f\"\n //             strokeWidth={2}\n //             pointerEvents=\"none\"\n //           />\n //         )}\n //       </svg>\n //       {tooltipData && (\n //         <TooltipWithBounds\n //           top={tooltipTop - 12}\n //           left={tooltipLeft + 12}\n //           style={{\n //             backgroundColor: '#4d4d4d',\n //             color: 'white',\n //             padding: '0.5rem',\n //             borderRadius: '4px',\n //             fontSize: '10px',\n //           }}\n //         >\n //           <div>Date: {timeFormat('%b %d, %Y')(xAccessor(tooltipData))}</div>\n //           <div>Value: {yAccessor(tooltipData)}</div>\n //         </TooltipWithBounds>\n //       )}\n //     </div>\n //   );\n // }\n // export { LineChart };\n // import React, { useMemo } from 'react'\n // import { extent } from 'd3-array'\n // import { timeFormat } from 'd3-time-format'\n // import { AxisBottom, AxisRight } from '@visx/axis'\n // import { LinePath } from '@visx/shape'\n // import { Group } from '@visx/group'\n // import { scaleLinear, scaleTime } from '@visx/scale'\n // import { GridRows } from \"@visx/grid\";\n // import { curveLinear } from '@visx/curve'\n // import { data } from '../data/line-chart'\n // import { getDimensions, xAccessor, yAccessor } from '#/utils/line-chart'\n // type Props = {\n //   width: number\n //   height: number\n // }\n // function LineChart({ width, height }: Props) {\n //   const { margin, boundedWidth, boundedHeight } = getDimensions({\n //     width,\n //     height,\n //   })\n //   const LpYValue = 54300.2; \n //   const LatestValue = 59980.9;\n //   const xScale = useMemo(\n //     () =>\n //       scaleTime<number>({\n //         domain: extent(data, xAccessor) as [Date, Date],\n //         range: [0, boundedWidth],\n //         nice: true,\n //       }),\n //     [boundedWidth]\n //   )\n //   const yScale = useMemo(\n //     () =>\n //       scaleLinear<number>({\n //         domain: extent(data, yAccessor) as [number, number],\n //         range: [boundedHeight, 0],\n //         nice: true,\n //       }),\n //     [boundedHeight]\n //   )\n //   const customYPosition = yScale(LpYValue); \n //   // Generate y-axis tick values and ensure both LpYValue and LatestValue are included\n //   const yTickValues = yScale.ticks(8);\n //   if (!yTickValues.includes(LpYValue)) {\n //     yTickValues.push(LpYValue);\n //   }\n //   if (!yTickValues.includes(LatestValue)) {\n //     yTickValues.push(LatestValue);\n //   }\n //   return (\n //     <div className=\"w-fit\">\n //       <svg\n //         className=''\n //         width={width}\n //         height={height}\n //         role=\"figure\"\n //       >\n //         <rect\n //             x={0}\n //             y={0}\n //             width={width}\n //             height={height}\n //         />\n //         <title>line chart looking at the distribution of max temperature</title>\n //         <Group top={margin.top} left={margin.left}>\n //           <GridRows\n //             scale={yScale}\n //             width={boundedWidth}\n //             strokeDasharray=\"1,3\"\n //             stroke=\"#262626\"\n //             pointerEvents=\"none\"\n //           />\n //           <LinePath\n //             curve={curveLinear}\n //             data={data}\n //             stroke={\"#FFCA43\"}\n //             strokeWidth={1.5}\n //             x={(d) => xScale(xAccessor(d)) ?? 0}\n //             y={(d) => yScale(yAccessor(d)) ?? 0}\n //           />\n //           {customYPosition && (\n //             <line\n //               x1={0}\n //               x2={boundedWidth}\n //               y1={customYPosition}\n //               y2={customYPosition}\n //               stroke=\"white\"\n //               strokeWidth={1}\n //               strokeDasharray=\"3,5\" \n //             />\n //           )}\n //           <AxisRight\n //             left={boundedWidth + margin.right - 40}\n //             scale={yScale}\n //             top={0}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             labelOffset={0}\n //             tickValues={yTickValues}\n //             tickFormat={(value) => `${Number(value).toFixed(1)}`} \n //             tickLabelProps={() => ({\n //               fill: '#A6A6A6',\n //               fontSize: 9,\n //               textAnchor: 'start',\n //             })}\n //             tickComponent={({ formattedValue, x, y }) => {\n //               if (formattedValue === undefined) {\n //                 return null; \n //               }\n //               const numFormattedValue = Number(formattedValue); \n //               const isLPValue = numFormattedValue === LpYValue;\n //               const isLatestValue = numFormattedValue === LatestValue;\n //               const text = isLPValue\n //                 ? `LP ${LpYValue.toFixed(1)}`\n //                 : isLatestValue\n //                 ? `${LatestValue.toFixed(1)}`\n //                 : formattedValue;\n //               const paddingX = 8; \n //               const paddingY = 2; \n //               const fontSize = 9;\n //               const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n //               const rectWidth = textWidth + paddingX; // Add padding for width\n //               const rectHeight = fontSize + paddingY; // Add padding for height\n //               if (isLPValue) {\n //                 return (\n //                   <g transform={`translate(${x},${y})`}>\n //                     <rect\n //                       x={-rectWidth / 2} \n //                       y={-rectHeight / 2}\n //                       width={rectWidth}\n //                       height={rectHeight}\n //                       fill=\"#4d4d4d\"\n //                       rx={0} \n //                     />\n //                     <text\n //                       fill=\"white\"\n //                       fontSize={fontSize}\n //                       textAnchor=\"middle\"\n //                       dy=\"0.32em\"\n //                       x={0} \n //                     >\n //                       LP {LpYValue.toFixed(1)}\n //                     </text>\n //                   </g>\n //                 );\n //               } else if (isLatestValue) {\n //                 return (\n //                   <g transform={`translate(${x},${y})`}>\n //                     <rect\n //                       x={-rectWidth / 2} \n //                       y={-rectHeight / 2}\n //                       width={rectWidth}\n //                       height={rectHeight}\n //                       fill=\"white\"\n //                       rx={0} \n //                     />\n //                     <text\n //                       fill=\"black\"\n //                       fontWeight=\"700\"\n //                       fontSize={fontSize}\n //                       textAnchor=\"middle\"\n //                       dy=\"0.32em\"\n //                       x={0}\n //                     >\n //                       {LatestValue.toFixed(1)}\n //                     </text>\n //                   </g>\n //                 );\n //               } else {\n //                 return (\n //                   <text\n //                     fill=\"#A6A6A6\"\n //                     fontSize={fontSize}\n //                     textAnchor=\"start\"\n //                     dy=\"0.32em\"\n //                     x={-10}\n //                     y={y}\n //                   >\n //                     {text}\n //                   </text>\n //                 );\n //               }\n //             }}\n //           />\n //           <AxisBottom\n //             rangePadding={41}\n //             top={boundedHeight}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             scale={xScale}\n //             tickFormat={(d) => {\n //               return d instanceof Date ? timeFormat('%H:%M')(d) : '';\n //             }}\n //             tickLabelProps={() => ({\n //               fill: 'white',\n //               fontSize: 8,\n //               textAnchor: 'middle',\n //             })}\n //           />\n //         </Group>\n //       </svg>\n //     </div>\n //   )\n // }\n // export { LineChart }\n // 'use client'\n // import React, { useMemo, useCallback } from 'react';\n // import { extent, bisector, max, min } from 'd3-array';\n // import { timeFormat } from 'd3-time-format';\n // import { AxisBottom, AxisRight } from '@visx/axis';\n // import { LinePath } from '@visx/shape';\n // import { Group } from '@visx/group';\n // import { scaleLinear, scaleTime } from '@visx/scale';\n // import { GridRows } from '@visx/grid';\n // import { curveLinear } from '@visx/curve';\n // import { useTooltip, TooltipWithBounds } from '@visx/tooltip';\n // import { localPoint } from '@visx/event';\n // import { data } from '../data/line-chart';\n // import { getDimensions, xAccessor, yAccessor } from '#/utils/line-chart';\n // type Props = {\n //   width: number;\n //   height: number;\n // };\n // function LineChart({ width, height }: Props) {\n //   const { margin, boundedWidth, boundedHeight } = getDimensions({\n //     width,\n //     height,\n //   });\n //   const LpYValue = 54300.2;\n //   const LatestValue = 59980.9;\n //   const xScale = useMemo(\n //     () =>\n //       scaleTime<number>({\n //         domain: extent(data, xAccessor) as [Date, Date],\n //         range: [0, boundedWidth],\n //         nice: true,\n //       }),\n //     [boundedWidth]\n //   );\n //   const yScale = useMemo(\n //     () =>\n //       scaleLinear<number>({\n //         domain: extent(data, yAccessor) as [number, number],\n //         range: [boundedHeight, 0],\n //         nice: true,\n //       }),\n //     [boundedHeight]\n //   );\n //   const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } = useTooltip();\n //   const handleTooltip = useCallback(\n //     (event: React.MouseEvent) => {\n //       const { x } = localPoint(event) || { x: 0 };\n //       const x0 = xScale.invert(x ); // Correctly handle margin offset\n //       const bisectDate = bisector(xAccessor).left;\n //       const index = bisectDate(data, x0, 1);\n //       const d0 = data[index - 1];\n //       const d1 = data[index];\n //       let d = d0;\n //       if (d1 && xAccessor(d1)) {\n //         d = x0 - xAccessor(d0) > xAccessor(d1) - x0 ? d1 : d0;\n //       }\n //       showTooltip({\n //         tooltipData: d,\n //         tooltipLeft: xScale(xAccessor(d)),\n //         tooltipTop: yScale(yAccessor(d)),\n //       });\n //     },\n //     [xScale, yScale, showTooltip]\n //   );\n //   const customYPosition = yScale(LpYValue);\n //   const yTickValues = yScale.ticks(8);\n //   if (!yTickValues.includes(LpYValue)) yTickValues.push(LpYValue);\n //   if (!yTickValues.includes(LatestValue)) yTickValues.push(LatestValue);\n //   return (\n //     <div className=\"w-fit\">\n //       <svg className=\"\" width={width} height={height} role=\"figure\">\n //         <rect x={0} y={0} width={width} height={height} />\n //         <Group top={margin.top} left={margin.left}>\n //           <GridRows\n //             scale={yScale}\n //             width={boundedWidth}\n //             strokeDasharray=\"1,3\"\n //             stroke=\"#262626\"\n //             pointerEvents=\"none\"\n //           />\n //           <LinePath\n //             curve={curveLinear}\n //             data={data}\n //             stroke={'#FFCA43'}\n //             strokeWidth={1.5}\n //             x={(d) => xScale(xAccessor(d)) ?? 0}\n //             y={(d) => yScale(yAccessor(d)) ?? 0}\n //           />\n //           {customYPosition && (\n //             <line\n //               x1={0}\n //               x2={boundedWidth}\n //               y1={customYPosition}\n //               y2={customYPosition}\n //               stroke=\"white\"\n //               strokeWidth={1}\n //               strokeDasharray=\"3,5\"\n //             />\n //           )}\n //           <AxisRight\n //             left={boundedWidth + margin.right - 40}\n //             scale={yScale}\n //             top={0}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             tickValues={yTickValues}\n //             tickFormat={(value) => `${Number(value).toFixed(1)}`}\n //             tickLabelProps={() => ({\n //               fill: '#A6A6A6',\n //               fontSize: 9,\n //               textAnchor: 'start',\n //             })}\n //             tickComponent={({\n //               formattedValue, x, y }) => {\n //                 if (formattedValue === undefined) {\n //                   return null; \n //                 }\n //                 const numFormattedValue = Number(formattedValue); \n //                 const isLPValue = numFormattedValue === LpYValue;\n //                 const isLatestValue = numFormattedValue === LatestValue;\n //                 const text = isLPValue\n //                   ? `LP ${LpYValue.toFixed(1)}`\n //                   : isLatestValue\n //                   ? `${LatestValue.toFixed(1)}`\n //                   : formattedValue;\n //                 const paddingX = 8; \n //                 const paddingY = 2; \n //                 const fontSize = 9;\n //                 const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n //                 const rectWidth = textWidth + paddingX; // Add padding for width\n //                 const rectHeight = fontSize + paddingY; // Add padding for height\n //                 if (isLPValue) {\n //                   return (\n //                     <g transform={`translate(${x},${y})`}>\n //                       <rect\n //                         x={-rectWidth / 2} \n //                         y={-rectHeight / 2}\n //                         width={rectWidth}\n //                         height={rectHeight}\n //                         fill=\"#4d4d4d\"\n //                         rx={0} \n //                       />\n //                       <text\n //                         fill=\"white\"\n //                         fontSize={fontSize}\n //                         textAnchor=\"middle\"\n //                         dy=\"0.32em\"\n //                         x={0} \n //                       >\n //                         LP {LpYValue.toFixed(1)}\n //                       </text>\n //                     </g>\n //                   );\n //                 } else if (isLatestValue) {\n //                   return (\n //                     <g transform={`translate(${x},${y})`}>\n //                       <rect\n //                         x={-rectWidth / 2} \n //                         y={-rectHeight / 2}\n //                         width={rectWidth}\n //                         height={rectHeight}\n //                         fill=\"white\"\n //                         rx={0} \n //                       />\n //                       <text\n //                         fill=\"black\"\n //                         fontWeight=\"700\"\n //                         fontSize={fontSize}\n //                         textAnchor=\"middle\"\n //                         dy=\"0.32em\"\n //                         x={0}\n //                       >\n //                         {LatestValue.toFixed(1)}\n //                       </text>\n //                     </g>\n //                   );\n //                 } else {\n //                   return (\n //                     <text\n //                       fill=\"#A6A6A6\"\n //                       fontSize={fontSize}\n //                       textAnchor=\"start\"\n //                       dy=\"0.32em\"\n //                       x={-10}\n //                       y={y}\n //                     >\n //                       {text}\n //                     </text>\n //                   );\n //                 }\n //             }}\n //           />\n //           <AxisBottom\n //             rangePadding={41}\n //             top={boundedHeight}\n //             hideAxisLine={true}\n //             hideTicks={true}\n //             scale={xScale}\n //             tickFormat={(d) => (d instanceof Date ? timeFormat('%H:%M')(d) : '')}\n //             tickLabelProps={() => ({\n //               fill: 'white',\n //               fontSize: 8,\n //               textAnchor: 'middle',\n //             })}\n //           />\n //           <rect\n //             x={0}\n //             y={0}\n //             width={boundedWidth}\n //             height={boundedHeight}\n //             fill=\"transparent\"\n //             onMouseMove={handleTooltip}\n //             onMouseLeave={() => hideTooltip()}\n //           />\n //         </Group>\n //         {tooltipData && (\n //           <circle\n //             cx={tooltipLeft + 14}\n //             cy={tooltipTop + 12 }\n //             r={5}\n //             stroke=\"black\"\n //             fill=\"#ffcb8f\"\n //             strokeWidth={2}\n //             pointerEvents=\"none\"\n //           />\n //         )}\n //       </svg>\n //       {tooltipData && (\n //         <TooltipWithBounds\n //           top={tooltipTop-250}\n //           left={tooltipLeft}\n //           style={{\n //             width: '120px',\n //             backgroundColor: '#4d4d4d',\n //             color: 'white',\n //             padding: '0.5rem',\n //             borderRadius: '4px',\n //             fontSize: '10px',\n //           }}\n //         >\n //           <div>Date: {timeFormat('%b %d, %Y')(xAccessor(tooltipData))}</div>\n //           <div>Value: {yAccessor(tooltipData)}</div>\n //         </TooltipWithBounds>\n //       )}\n //     </div>\n //   );\n // }\n // export { LineChart };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL2xpbmUtY2hhcnQudHN4IiwibWFwcGluZ3MiOiJzREFBQSxDQUVBLHlDQUF5QztDQUN6QyxvQ0FBb0M7Q0FDcEMsOENBQThDO0NBQzlDLHFEQUFxRDtDQUNyRCx5Q0FBeUM7Q0FDekMsc0NBQXNDO0NBQ3RDLHVEQUF1RDtDQUN2RCx5Q0FBeUM7Q0FDekMsNENBQTRDO0NBRTVDLDRDQUE0QztDQUM1QywyRUFBMkU7Q0FFM0UsaUJBQWlCO0NBQ2pCLGtCQUFrQjtDQUNsQixtQkFBbUI7Q0FDbkIsSUFBSTtDQUVKLGlEQUFpRDtDQUNqRCxvRUFBb0U7Q0FDcEUsYUFBYTtDQUNiLGNBQWM7Q0FDZCxPQUFPO0NBRVAsK0JBQStCO0NBQy9CLGlDQUFpQztDQUVqQyw0QkFBNEI7Q0FDNUIsWUFBWTtDQUNaLDRCQUE0QjtDQUM1QiwyREFBMkQ7Q0FDM0Qsb0NBQW9DO0NBQ3BDLHNCQUFzQjtDQUN0QixZQUFZO0NBQ1oscUJBQXFCO0NBQ3JCLE1BQU07Q0FFTiw0QkFBNEI7Q0FDNUIsWUFBWTtDQUNaLDhCQUE4QjtDQUM5QiwrREFBK0Q7Q0FDL0QscUNBQXFDO0NBQ3JDLHNCQUFzQjtDQUN0QixZQUFZO0NBQ1osc0JBQXNCO0NBQ3RCLE1BQU07Q0FFTiwrQ0FBK0M7Q0FFL0MseUZBQXlGO0NBQ3pGLHlDQUF5QztDQUV6QywyQ0FBMkM7Q0FDM0Msa0NBQWtDO0NBQ2xDLE1BQU07Q0FDTiw4Q0FBOEM7Q0FDOUMscUNBQXFDO0NBQ3JDLE1BQU07Q0FFTixhQUFhO0NBQ2IsOEJBQThCO0NBQzlCLGFBQWE7Q0FDYix1QkFBdUI7Q0FDdkIsd0JBQXdCO0NBQ3hCLDBCQUEwQjtDQUMxQix3QkFBd0I7Q0FDeEIsVUFBVTtDQUNWLGdCQUFnQjtDQUNoQixvQkFBb0I7Q0FDcEIsb0JBQW9CO0NBQ3BCLDRCQUE0QjtDQUM1Qiw4QkFBOEI7Q0FDOUIsYUFBYTtDQUNiLG1GQUFtRjtDQUNuRixzREFBc0Q7Q0FDdEQsc0JBQXNC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QztDQUNoQyxrQ0FBa0M7Q0FDbEMsa0NBQWtDO0NBQ2xDLCtCQUErQjtDQUMvQiw2QkFBNkI7Q0FDN0Isb0ZBQW9GO0NBQ3BGLHVDQUF1QztDQUN2QywrQkFBK0I7Q0FDL0IsNkJBQTZCO0NBQzdCLHNDQUFzQztDQUN0QyxrQkFBa0I7Q0FDbEIsZUFBZTtDQUNmLGtCQUFrQjtDQUNsQixvQkFBb0I7Q0FDcEIsb0JBQW9CO0NBQ3BCLG1DQUFtQztDQUNuQyxxQ0FBcUM7Q0FDckMsaUNBQWlDO0NBQ2pDLDBDQUEwQztDQUMxQyxpREFBaUQ7Q0FDakQsZUFBZTtDQUNmLG1CQUFtQjtDQUNuQiw0QkFBNEI7Q0FDNUIsb0JBQW9CO0NBQ3BCLG9DQUFvQztDQUNwQyxvQ0FBb0M7Q0FDcEMsb0JBQW9CO0NBQ3BCLDZCQUE2QjtDQUM3Qiw2QkFBNkI7Q0FDN0IsOEJBQThCO0NBQzlCLG1DQUFtQztDQUNuQyxlQUFlO0NBQ2YsYUFBYTtDQUNiLGVBQWU7Q0FDZiwwQkFBMEI7Q0FDMUIsNkJBQTZCO0NBQzdCLGlDQUFpQztDQUNqQywrQkFBK0I7Q0FDL0IscUJBQXFCO0NBQ3JCLDhCQUE4QjtDQUM5QiwwQ0FBMEM7Q0FDMUMsOEJBQThCO0NBQzlCLGlDQUFpQztDQUNqQyxtQ0FBbUM7Q0FDbkMsZ0NBQWdDO0NBQ2hDLGVBQWU7Q0FDZixZQUFZO0NBQ1osK0VBQStFO0NBQy9FLHVEQUF1RDtDQUN2RCwrQkFBK0I7Q0FDL0IsV0FBVztDQUNYLGFBQWE7Q0FDYixPQUFPO0NBQ1AsSUFBSTtDQUVKLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9saW5lLWNoYXJ0LnRzeD9jODVjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuLy8gaW1wb3J0IHsgZXh0ZW50IH0gZnJvbSAnZDMtYXJyYXknXG4vLyBpbXBvcnQgeyB0aW1lRm9ybWF0IH0gZnJvbSAnZDMtdGltZS1mb3JtYXQnXG4vLyBpbXBvcnQgeyBBeGlzQm90dG9tLCBBeGlzUmlnaHQgfSBmcm9tICdAdmlzeC9heGlzJ1xuLy8gaW1wb3J0IHsgTGluZVBhdGggfSBmcm9tICdAdmlzeC9zaGFwZSdcbi8vIGltcG9ydCB7IEdyb3VwIH0gZnJvbSAnQHZpc3gvZ3JvdXAnXG4vLyBpbXBvcnQgeyBzY2FsZUxpbmVhciwgc2NhbGVUaW1lIH0gZnJvbSAnQHZpc3gvc2NhbGUnXG4vLyBpbXBvcnQgeyBHcmlkUm93cyB9IGZyb20gXCJAdmlzeC9ncmlkXCI7XG4vLyBpbXBvcnQgeyBjdXJ2ZUxpbmVhciB9IGZyb20gJ0B2aXN4L2N1cnZlJ1xuXG4vLyBpbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vZGF0YS9saW5lLWNoYXJ0J1xuLy8gaW1wb3J0IHsgZ2V0RGltZW5zaW9ucywgeEFjY2Vzc29yLCB5QWNjZXNzb3IgfSBmcm9tICcjL3V0aWxzL2xpbmUtY2hhcnQnXG5cbi8vIHR5cGUgUHJvcHMgPSB7XG4vLyAgIHdpZHRoOiBudW1iZXJcbi8vICAgaGVpZ2h0OiBudW1iZXJcbi8vIH1cblxuLy8gZnVuY3Rpb24gTGluZUNoYXJ0KHsgd2lkdGgsIGhlaWdodCB9OiBQcm9wcykge1xuLy8gICBjb25zdCB7IG1hcmdpbiwgYm91bmRlZFdpZHRoLCBib3VuZGVkSGVpZ2h0IH0gPSBnZXREaW1lbnNpb25zKHtcbi8vICAgICB3aWR0aCxcbi8vICAgICBoZWlnaHQsXG4vLyAgIH0pXG5cbi8vICAgY29uc3QgTHBZVmFsdWUgPSA1NDMwMC4yOyBcbi8vICAgY29uc3QgTGF0ZXN0VmFsdWUgPSA1OTk4MC45O1xuXG4vLyAgIGNvbnN0IHhTY2FsZSA9IHVzZU1lbW8oXG4vLyAgICAgKCkgPT5cbi8vICAgICAgIHNjYWxlVGltZTxudW1iZXI+KHtcbi8vICAgICAgICAgZG9tYWluOiBleHRlbnQoZGF0YSwgeEFjY2Vzc29yKSBhcyBbRGF0ZSwgRGF0ZV0sXG4vLyAgICAgICAgIHJhbmdlOiBbMCwgYm91bmRlZFdpZHRoXSxcbi8vICAgICAgICAgbmljZTogdHJ1ZSxcbi8vICAgICAgIH0pLFxuLy8gICAgIFtib3VuZGVkV2lkdGhdXG4vLyAgIClcblxuLy8gICBjb25zdCB5U2NhbGUgPSB1c2VNZW1vKFxuLy8gICAgICgpID0+XG4vLyAgICAgICBzY2FsZUxpbmVhcjxudW1iZXI+KHtcbi8vICAgICAgICAgZG9tYWluOiBleHRlbnQoZGF0YSwgeUFjY2Vzc29yKSBhcyBbbnVtYmVyLCBudW1iZXJdLFxuLy8gICAgICAgICByYW5nZTogW2JvdW5kZWRIZWlnaHQsIDBdLFxuLy8gICAgICAgICBuaWNlOiB0cnVlLFxuLy8gICAgICAgfSksXG4vLyAgICAgW2JvdW5kZWRIZWlnaHRdXG4vLyAgIClcblxuLy8gICBjb25zdCBjdXN0b21ZUG9zaXRpb24gPSB5U2NhbGUoTHBZVmFsdWUpOyBcblxuLy8gICAvLyBHZW5lcmF0ZSB5LWF4aXMgdGljayB2YWx1ZXMgYW5kIGVuc3VyZSBib3RoIExwWVZhbHVlIGFuZCBMYXRlc3RWYWx1ZSBhcmUgaW5jbHVkZWRcbi8vICAgY29uc3QgeVRpY2tWYWx1ZXMgPSB5U2NhbGUudGlja3MoOCk7XG5cbi8vICAgaWYgKCF5VGlja1ZhbHVlcy5pbmNsdWRlcyhMcFlWYWx1ZSkpIHtcbi8vICAgICB5VGlja1ZhbHVlcy5wdXNoKExwWVZhbHVlKTtcbi8vICAgfVxuLy8gICBpZiAoIXlUaWNrVmFsdWVzLmluY2x1ZGVzKExhdGVzdFZhbHVlKSkge1xuLy8gICAgIHlUaWNrVmFsdWVzLnB1c2goTGF0ZXN0VmFsdWUpO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZml0XCI+XG4vLyAgICAgICA8c3ZnXG4vLyAgICAgICAgIGNsYXNzTmFtZT0nJ1xuLy8gICAgICAgICB3aWR0aD17d2lkdGh9XG4vLyAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuLy8gICAgICAgICByb2xlPVwiZmlndXJlXCJcbi8vICAgICAgID5cbi8vICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgIHg9ezB9XG4vLyAgICAgICAgICAgICB5PXswfVxuLy8gICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuLy8gICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4vLyAgICAgICAgIC8+XG4vLyAgICAgICAgIDx0aXRsZT5saW5lIGNoYXJ0IGxvb2tpbmcgYXQgdGhlIGRpc3RyaWJ1dGlvbiBvZiBtYXggdGVtcGVyYXR1cmU8L3RpdGxlPlxuLy8gICAgICAgICA8R3JvdXAgdG9wPXttYXJnaW4udG9wfSBsZWZ0PXttYXJnaW4ubGVmdH0+XG4vLyAgICAgICAgICAgPEdyaWRSb3dzXG4vLyAgICAgICAgICAgICBzY2FsZT17eVNjYWxlfVxuLy8gICAgICAgICAgICAgd2lkdGg9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheT1cIjEsM1wiXG4vLyAgICAgICAgICAgICBzdHJva2U9XCIjMjYyNjI2XCJcbi8vICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICAgIDxMaW5lUGF0aFxuLy8gICAgICAgICAgICAgY3VydmU9e2N1cnZlTGluZWFyfVxuLy8gICAgICAgICAgICAgZGF0YT17ZGF0YX1cbi8vICAgICAgICAgICAgIHN0cm9rZT17XCIjRkZDQTQzXCJ9XG4vLyAgICAgICAgICAgICBzdHJva2VXaWR0aD17MS41fVxuLy8gICAgICAgICAgICAgeD17KGQpID0+IHhTY2FsZSh4QWNjZXNzb3IoZCkpID8/IDB9XG4vLyAgICAgICAgICAgICB5PXsoZCkgPT4geVNjYWxlKHlBY2Nlc3NvcihkKSkgPz8gMH1cbi8vICAgICAgICAgICAvPlxuXG4vLyAgICAgICAgICAge2N1c3RvbVlQb3NpdGlvbiAmJiAoXG4vLyAgICAgICAgICAgICA8bGluZVxuLy8gICAgICAgICAgICAgICB4MT17MH1cbi8vICAgICAgICAgICAgICAgeDI9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgICAgeTE9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgeTI9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlPVwid2hpdGVcIlxuLy8gICAgICAgICAgICAgICBzdHJva2VXaWR0aD17MX1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5PVwiMyw1XCIgXG4vLyAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICl9XG5cbi8vICAgICAgICAgICA8QXhpc1JpZ2h0XG4vLyAgICAgICAgICAgICBsZWZ0PXtib3VuZGVkV2lkdGggKyBtYXJnaW4ucmlnaHQgLSA0MH1cbi8vICAgICAgICAgICAgIHNjYWxlPXt5U2NhbGV9XG4vLyAgICAgICAgICAgICB0b3A9ezB9XG4vLyAgICAgICAgICAgICBoaWRlQXhpc0xpbmU9e3RydWV9XG4vLyAgICAgICAgICAgICBoaWRlVGlja3M9e3RydWV9XG4vLyAgICAgICAgICAgICBsYWJlbE9mZnNldD17MH1cbi8vICAgICAgICAgICAgIHRpY2tWYWx1ZXM9e3lUaWNrVmFsdWVzfVxuLy8gICAgICAgICAgICAgdGlja0Zvcm1hdD17KHZhbHVlKSA9PiBgJHtOdW1iZXIodmFsdWUpLnRvRml4ZWQoMSl9YH0gXG4vLyAgICAgICAgICAgICB0aWNrTGFiZWxQcm9wcz17KCkgPT4gKHtcbi8vICAgICAgICAgICAgICAgZmlsbDogJyNBNkE2QTYnLFxuLy8gICAgICAgICAgICAgICBmb250U2l6ZTogOSxcbi8vICAgICAgICAgICAgICAgdGV4dEFuY2hvcjogJ3N0YXJ0Jyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgICAgdGlja0NvbXBvbmVudD17KHsgZm9ybWF0dGVkVmFsdWUsIHgsIHkgfSkgPT4ge1xuLy8gICAgICAgICAgICAgICBpZiAoZm9ybWF0dGVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyBcbi8vICAgICAgICAgICAgICAgfVxuXG4vLyAgICAgICAgICAgICAgIGNvbnN0IG51bUZvcm1hdHRlZFZhbHVlID0gTnVtYmVyKGZvcm1hdHRlZFZhbHVlKTsgXG4vLyAgICAgICAgICAgICAgIGNvbnN0IGlzTFBWYWx1ZSA9IG51bUZvcm1hdHRlZFZhbHVlID09PSBMcFlWYWx1ZTtcbi8vICAgICAgICAgICAgICAgY29uc3QgaXNMYXRlc3RWYWx1ZSA9IG51bUZvcm1hdHRlZFZhbHVlID09PSBMYXRlc3RWYWx1ZTtcblxuLy8gICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gaXNMUFZhbHVlXG4vLyAgICAgICAgICAgICAgICAgPyBgTFAgJHtMcFlWYWx1ZS50b0ZpeGVkKDEpfWBcbi8vICAgICAgICAgICAgICAgICA6IGlzTGF0ZXN0VmFsdWVcbi8vICAgICAgICAgICAgICAgICA/IGAke0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9YFxuLy8gICAgICAgICAgICAgICAgIDogZm9ybWF0dGVkVmFsdWU7XG5cbi8vICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ1ggPSA4OyBcbi8vICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ1kgPSAyOyBcbi8vICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSA5O1xuXG4vLyAgICAgICAgICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IHRleHQubGVuZ3RoICogKGZvbnRTaXplICogMC42KTsgLy8gRXN0aW1hdGUgdGhhdCBlYWNoIGNoYXJhY3RlciBpcyB+NjAlIG9mIHRoZSBmb250IHNpemVcbi8vICAgICAgICAgICAgICAgY29uc3QgcmVjdFdpZHRoID0gdGV4dFdpZHRoICsgcGFkZGluZ1g7IC8vIEFkZCBwYWRkaW5nIGZvciB3aWR0aFxuLy8gICAgICAgICAgICAgICBjb25zdCByZWN0SGVpZ2h0ID0gZm9udFNpemUgKyBwYWRkaW5nWTsgLy8gQWRkIHBhZGRpbmcgZm9yIGhlaWdodFxuXG4vLyAgICAgICAgICAgICAgIGlmIChpc0xQVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sJHt5fSlgfT5cbi8vICAgICAgICAgICAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgeT17LXJlY3RIZWlnaHQgLyAyfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtyZWN0V2lkdGh9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjNGQ0ZDRkXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICByeD17MH0gXG4vLyAgICAgICAgICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgICAgICAgICAgIDx0ZXh0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZHk9XCIwLjMyZW1cIlxuLy8gICAgICAgICAgICAgICAgICAgICAgIHg9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgTFAge0xwWVZhbHVlLnRvRml4ZWQoMSl9XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cbi8vICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTGF0ZXN0VmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sJHt5fSlgfT5cbi8vICAgICAgICAgICAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgeT17LXJlY3RIZWlnaHQgLyAyfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtyZWN0V2lkdGh9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJ3aGl0ZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgcng9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICAgICAgICAgICA8dGV4dFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJibGFja1wiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodD1cIjcwMFwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU9e2ZvbnRTaXplfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHRleHRBbmNob3I9XCJtaWRkbGVcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgIGR5PVwiMC4zMmVtXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXswfVxuLy8gICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAge0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cbi8vICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiAoXG4vLyAgICAgICAgICAgICAgICAgICA8dGV4dFxuLy8gICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0E2QTZBNlwiXG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplPXtmb250U2l6ZX1cbi8vICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cInN0YXJ0XCJcbi8vICAgICAgICAgICAgICAgICAgICAgZHk9XCIwLjMyZW1cIlxuLy8gICAgICAgICAgICAgICAgICAgICB4PXstMTB9XG4vLyAgICAgICAgICAgICAgICAgICAgIHk9e3l9XG4vLyAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgIHt0ZXh0fVxuLy8gICAgICAgICAgICAgICAgICAgPC90ZXh0PlxuLy8gICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH19XG4vLyAgICAgICAgICAgLz5cbi8vICAgICAgICAgICA8QXhpc0JvdHRvbVxuLy8gICAgICAgICAgICAgcmFuZ2VQYWRkaW5nPXs0MX1cbi8vICAgICAgICAgICAgIHRvcD17Ym91bmRlZEhlaWdodH1cbi8vICAgICAgICAgICAgIGhpZGVBeGlzTGluZT17dHJ1ZX1cbi8vICAgICAgICAgICAgIGhpZGVUaWNrcz17dHJ1ZX1cbi8vICAgICAgICAgICAgIHNjYWxlPXt4U2NhbGV9XG4vLyAgICAgICAgICAgICB0aWNrRm9ybWF0PXsoZCkgPT4ge1xuLy8gICAgICAgICAgICAgICByZXR1cm4gZCBpbnN0YW5jZW9mIERhdGUgPyB0aW1lRm9ybWF0KCclSDolTScpKGQpIDogJyc7XG4vLyAgICAgICAgICAgICB9fVxuLy8gICAgICAgICAgICAgdGlja0xhYmVsUHJvcHM9eygpID0+ICh7XG4vLyAgICAgICAgICAgICAgIGZpbGw6ICd3aGl0ZScsXG4vLyAgICAgICAgICAgICAgIGZvbnRTaXplOiA4LFxuLy8gICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgIDwvR3JvdXA+XG4vLyAgICAgICA8L3N2Zz5cbi8vICAgICA8L2Rpdj5cbi8vICAgKVxuLy8gfVxuXG4vLyBleHBvcnQgeyBMaW5lQ2hhcnQgfVxuXG5cbi8vICd1c2UgY2xpZW50J1xuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBleHRlbnQsIGJpc2VjdG9yLCBtYXgsIG1pbiB9IGZyb20gJ2QzLWFycmF5Jztcbi8vIGltcG9ydCB7IHRpbWVGb3JtYXQgfSBmcm9tICdkMy10aW1lLWZvcm1hdCc7XG4vLyBpbXBvcnQgeyBBeGlzQm90dG9tLCBBeGlzUmlnaHQgfSBmcm9tICdAdmlzeC9heGlzJztcbi8vIGltcG9ydCB7IExpbmVQYXRoIH0gZnJvbSAnQHZpc3gvc2hhcGUnO1xuLy8gaW1wb3J0IHsgR3JvdXAgfSBmcm9tICdAdmlzeC9ncm91cCc7XG4vLyBpbXBvcnQgeyBzY2FsZUxpbmVhciwgc2NhbGVUaW1lIH0gZnJvbSAnQHZpc3gvc2NhbGUnO1xuLy8gaW1wb3J0IHsgR3JpZFJvd3MgfSBmcm9tICdAdmlzeC9ncmlkJztcbi8vIGltcG9ydCB7IGN1cnZlTGluZWFyIH0gZnJvbSAnQHZpc3gvY3VydmUnO1xuLy8gaW1wb3J0IHsgdXNlVG9vbHRpcCwgVG9vbHRpcFdpdGhCb3VuZHMgfSBmcm9tICdAdmlzeC90b29sdGlwJztcbi8vIGltcG9ydCB7IGxvY2FsUG9pbnQgfSBmcm9tICdAdmlzeC9ldmVudCc7XG5cbi8vIGltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi9kYXRhL2xpbmUtY2hhcnQnO1xuLy8gaW1wb3J0IHsgZ2V0RGltZW5zaW9ucywgeEFjY2Vzc29yLCB5QWNjZXNzb3IgfSBmcm9tICcjL3V0aWxzL2xpbmUtY2hhcnQnO1xuXG4vLyB0eXBlIFByb3BzID0ge1xuLy8gICB3aWR0aDogbnVtYmVyO1xuLy8gICBoZWlnaHQ6IG51bWJlcjtcbi8vIH07XG5cbi8vIGZ1bmN0aW9uIExpbmVDaGFydCh7IHdpZHRoLCBoZWlnaHQgfTogUHJvcHMpIHtcbi8vICAgY29uc3QgeyBtYXJnaW4sIGJvdW5kZWRXaWR0aCwgYm91bmRlZEhlaWdodCB9ID0gZ2V0RGltZW5zaW9ucyh7XG4vLyAgICAgd2lkdGgsXG4vLyAgICAgaGVpZ2h0LFxuLy8gICB9KTtcblxuLy8gICBjb25zdCBMcFlWYWx1ZSA9IDU0MzAwLjI7XG4vLyAgIGNvbnN0IExhdGVzdFZhbHVlID0gNTk5ODAuOTtcblxuLy8gICBjb25zdCB4U2NhbGUgPSB1c2VNZW1vKFxuLy8gICAgICgpID0+XG4vLyAgICAgICBzY2FsZVRpbWU8bnVtYmVyPih7XG4vLyAgICAgICAgIGRvbWFpbjogZXh0ZW50KGRhdGEsIHhBY2Nlc3NvcikgYXMgW0RhdGUsIERhdGVdLFxuLy8gICAgICAgICByYW5nZTogWzAsIGJvdW5kZWRXaWR0aF0sXG4vLyAgICAgICAgIG5pY2U6IHRydWUsXG4vLyAgICAgICB9KSxcbi8vICAgICBbYm91bmRlZFdpZHRoXVxuLy8gICApO1xuXG4vLyAgIGNvbnN0IHlTY2FsZSA9IHVzZU1lbW8oXG4vLyAgICAgKCkgPT5cbi8vICAgICAgIHNjYWxlTGluZWFyPG51bWJlcj4oe1xuLy8gICAgICAgICBkb21haW46IGV4dGVudChkYXRhLCB5QWNjZXNzb3IpIGFzIFtudW1iZXIsIG51bWJlcl0sXG4vLyAgICAgICAgIHJhbmdlOiBbYm91bmRlZEhlaWdodCwgMF0sXG4vLyAgICAgICAgIG5pY2U6IHRydWUsXG4vLyAgICAgICB9KSxcbi8vICAgICBbYm91bmRlZEhlaWdodF1cbi8vICAgKTtcblxuLy8gICBjb25zdCB7IHNob3dUb29sdGlwLCBoaWRlVG9vbHRpcCwgdG9vbHRpcERhdGEsIHRvb2x0aXBMZWZ0LCB0b29sdGlwVG9wIH0gPSB1c2VUb29sdGlwKCk7XG5cbi8vICAgY29uc3QgaGFuZGxlVG9vbHRpcCA9IHVzZUNhbGxiYWNrKFxuLy8gICAgIChldmVudDogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuLy8gICAgICAgY29uc3QgeyB4IH0gPSBsb2NhbFBvaW50KGV2ZW50KSB8fCB7IHg6IDAgfTtcbi8vICAgICAgIGNvbnN0IHgwID0geFNjYWxlLmludmVydCh4IC0gbWFyZ2luLmxlZnQpOyAvLyBHZXQgdGhlIGRhdGUgZnJvbSB4IHBvc2l0aW9uXG5cbi8vICAgICAgIGNvbnN0IGJpc2VjdERhdGUgPSBiaXNlY3Rvcih4QWNjZXNzb3IpLmxlZnQ7XG4vLyAgICAgICBjb25zdCBpbmRleCA9IGJpc2VjdERhdGUoZGF0YSwgeDAsIDEpO1xuLy8gICAgICAgY29uc3QgZDAgPSBkYXRhW2luZGV4IC0gMV07XG4vLyAgICAgICBjb25zdCBkMSA9IGRhdGFbaW5kZXhdO1xuLy8gICAgICAgY29uc3QgZCA9IHgwIC0geEFjY2Vzc29yKGQwKSA+IHhBY2Nlc3NvcihkMSkgLSB4MCA/IGQxIDogZDA7IC8vIEdldCBjbG9zZXN0IGRhdGEgcG9pbnRcblxuLy8gICAgICAgc2hvd1Rvb2x0aXAoe1xuLy8gICAgICAgICB0b29sdGlwRGF0YTogZCxcbi8vICAgICAgICAgdG9vbHRpcExlZnQ6IHhTY2FsZSh4QWNjZXNzb3IoZCkpLFxuLy8gICAgICAgICB0b29sdGlwVG9wOiB5U2NhbGUoeUFjY2Vzc29yKGQpKSxcbi8vICAgICAgIH0pO1xuLy8gICAgIH0sXG4vLyAgICAgW3hTY2FsZSwgeVNjYWxlLCBzaG93VG9vbHRpcF1cbi8vICAgKTtcblxuLy8gICBjb25zdCBjdXN0b21ZUG9zaXRpb24gPSB5U2NhbGUoTHBZVmFsdWUpO1xuXG4vLyAgIGNvbnN0IHlUaWNrVmFsdWVzID0geVNjYWxlLnRpY2tzKDgpO1xuLy8gICBpZiAoIXlUaWNrVmFsdWVzLmluY2x1ZGVzKExwWVZhbHVlKSkgeVRpY2tWYWx1ZXMucHVzaChMcFlWYWx1ZSk7XG4vLyAgIGlmICgheVRpY2tWYWx1ZXMuaW5jbHVkZXMoTGF0ZXN0VmFsdWUpKSB5VGlja1ZhbHVlcy5wdXNoKExhdGVzdFZhbHVlKTtcblxuLy8gICByZXR1cm4gKFxuLy8gICAgIDxkaXYgY2xhc3NOYW1lPVwidy1maXRcIj5cbi8vICAgICAgIDxzdmcgY2xhc3NOYW1lPVwiXCIgd2lkdGg9e3dpZHRofSBoZWlnaHQ9e2hlaWdodH0gcm9sZT1cImZpZ3VyZVwiPlxuLy8gICAgICAgICA8cmVjdCB4PXswfSB5PXswfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxuLy8gICAgICAgICA8R3JvdXAgdG9wPXttYXJnaW4udG9wfSBsZWZ0PXttYXJnaW4ubGVmdH0+XG4vLyAgICAgICAgICAgPEdyaWRSb3dzXG4vLyAgICAgICAgICAgICBzY2FsZT17eVNjYWxlfVxuLy8gICAgICAgICAgICAgd2lkdGg9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheT1cIjEsM1wiXG4vLyAgICAgICAgICAgICBzdHJva2U9XCIjMjYyNjI2XCJcbi8vICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICAgIDxMaW5lUGF0aFxuLy8gICAgICAgICAgICAgY3VydmU9e2N1cnZlTGluZWFyfVxuLy8gICAgICAgICAgICAgZGF0YT17ZGF0YX1cbi8vICAgICAgICAgICAgIHN0cm9rZT17JyNGRkNBNDMnfVxuLy8gICAgICAgICAgICAgc3Ryb2tlV2lkdGg9ezEuNX1cbi8vICAgICAgICAgICAgIHg9eyhkKSA9PiB4U2NhbGUoeEFjY2Vzc29yKGQpKSA/PyAwfVxuLy8gICAgICAgICAgICAgeT17KGQpID0+IHlTY2FsZSh5QWNjZXNzb3IoZCkpID8/IDB9XG4vLyAgICAgICAgICAgLz5cblxuLy8gICAgICAgICAgIHtjdXN0b21ZUG9zaXRpb24gJiYgKFxuLy8gICAgICAgICAgICAgPGxpbmVcbi8vICAgICAgICAgICAgICAgeDE9ezB9XG4vLyAgICAgICAgICAgICAgIHgyPXtib3VuZGVkV2lkdGh9XG4vLyAgICAgICAgICAgICAgIHkxPXtjdXN0b21ZUG9zaXRpb259XG4vLyAgICAgICAgICAgICAgIHkyPXtjdXN0b21ZUG9zaXRpb259XG4vLyAgICAgICAgICAgICAgIHN0cm9rZT1cIndoaXRlXCJcbi8vICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9ezF9XG4vLyAgICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheT1cIjMsNVwiXG4vLyAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICl9XG5cbi8vICAgICAgICAgICA8QXhpc1JpZ2h0XG4vLyAgICAgICAgICAgICBsZWZ0PXtib3VuZGVkV2lkdGggKyBtYXJnaW4ucmlnaHQgLSA0MH1cbi8vICAgICAgICAgICAgIHNjYWxlPXt5U2NhbGV9XG4vLyAgICAgICAgICAgICB0b3A9ezB9XG4vLyAgICAgICAgICAgICBoaWRlQXhpc0xpbmU9e3RydWV9XG4vLyAgICAgICAgICAgICBoaWRlVGlja3M9e3RydWV9XG4vLyAgICAgICAgICAgICB0aWNrVmFsdWVzPXt5VGlja1ZhbHVlc31cbi8vICAgICAgICAgICAgIHRpY2tGb3JtYXQ9eyh2YWx1ZSkgPT4gYCR7TnVtYmVyKHZhbHVlKS50b0ZpeGVkKDEpfWB9XG4vLyAgICAgICAgICAgICB0aWNrTGFiZWxQcm9wcz17KCkgPT4gKHtcbi8vICAgICAgICAgICAgICAgZmlsbDogJyNBNkE2QTYnLFxuLy8gICAgICAgICAgICAgICBmb250U2l6ZTogOSxcbi8vICAgICAgICAgICAgICAgdGV4dEFuY2hvcjogJ3N0YXJ0Jyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgICAgdGlja0NvbXBvbmVudD17KHsgZm9ybWF0dGVkVmFsdWUsIHgsIHkgfSkgPT4ge1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsgXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1Gb3JtYXR0ZWRWYWx1ZSA9IE51bWJlcihmb3JtYXR0ZWRWYWx1ZSk7IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzTFBWYWx1ZSA9IG51bUZvcm1hdHRlZFZhbHVlID09PSBMcFlWYWx1ZTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0xhdGVzdFZhbHVlID0gbnVtRm9ybWF0dGVkVmFsdWUgPT09IExhdGVzdFZhbHVlO1xuICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gaXNMUFZhbHVlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGBMUCAke0xwWVZhbHVlLnRvRml4ZWQoMSl9YFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpc0xhdGVzdFZhbHVlXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGAke0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9YFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ1ggPSA4OyBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nWSA9IDI7IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRTaXplID0gOTtcbiAgICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gdGV4dC5sZW5ndGggKiAoZm9udFNpemUgKiAwLjYpOyAvLyBFc3RpbWF0ZSB0aGF0IGVhY2ggY2hhcmFjdGVyIGlzIH42MCUgb2YgdGhlIGZvbnQgc2l6ZVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3RXaWR0aCA9IHRleHRXaWR0aCArIHBhZGRpbmdYOyAvLyBBZGQgcGFkZGluZyBmb3Igd2lkdGhcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWN0SGVpZ2h0ID0gZm9udFNpemUgKyBwYWRkaW5nWTsgLy8gQWRkIHBhZGRpbmcgZm9yIGhlaWdodFxuICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNMUFZhbHVlKSB7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHt4fSwke3l9KWB9PlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxyZWN0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5PXstcmVjdEhlaWdodCAvIDJ9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17cmVjdFdpZHRofVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiM0ZDRkNGRcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJ3aGl0ZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QW5jaG9yPVwibWlkZGxlXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5PVwiMC4zMmVtXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExQIHtMcFlWYWx1ZS50b0ZpeGVkKDEpfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTGF0ZXN0VmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke3h9LCR7eX0pYH0+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg9ey1yZWN0V2lkdGggLyAyfSBcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk9ey1yZWN0SGVpZ2h0IC8gMn1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtyZWN0V2lkdGh9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9e3JlY3RIZWlnaHR9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcng9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJibGFja1wiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0PVwiNzAwXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplPXtmb250U2l6ZX1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbmNob3I9XCJtaWRkbGVcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHk9XCIwLjMyZW1cIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeD17MH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TGF0ZXN0VmFsdWUudG9GaXhlZCgxKX1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIiNBNkE2QTZcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplPXtmb250U2l6ZX1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QW5jaG9yPVwic3RhcnRcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR5PVwiMC4zMmVtXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4PXstMTB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeT17eX1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXh0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICAgIDxBeGlzQm90dG9tXG4vLyAgICAgICAgICAgICByYW5nZVBhZGRpbmc9ezQxfVxuLy8gICAgICAgICAgICAgdG9wPXtib3VuZGVkSGVpZ2h0fVxuLy8gICAgICAgICAgICAgaGlkZUF4aXNMaW5lPXt0cnVlfVxuLy8gICAgICAgICAgICAgaGlkZVRpY2tzPXt0cnVlfVxuLy8gICAgICAgICAgICAgc2NhbGU9e3hTY2FsZX1cbi8vICAgICAgICAgICAgIHRpY2tGb3JtYXQ9eyhkKSA9PiAoZCBpbnN0YW5jZW9mIERhdGUgPyB0aW1lRm9ybWF0KCclSDolTScpKGQpIDogJycpfVxuLy8gICAgICAgICAgICAgdGlja0xhYmVsUHJvcHM9eygpID0+ICh7XG4vLyAgICAgICAgICAgICAgIGZpbGw6ICd3aGl0ZScsXG4vLyAgICAgICAgICAgICAgIGZvbnRTaXplOiA4LFxuLy8gICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgIHg9ezB9XG4vLyAgICAgICAgICAgICB5PXswfVxuLy8gICAgICAgICAgICAgd2lkdGg9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgIGhlaWdodD17Ym91bmRlZEhlaWdodH1cbi8vICAgICAgICAgICAgIGZpbGw9XCJ0cmFuc3BhcmVudFwiXG4vLyAgICAgICAgICAgICBvbk1vdXNlTW92ZT17aGFuZGxlVG9vbHRpcH1cbi8vICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17KCkgPT4gaGlkZVRvb2x0aXAoKX1cbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICA8L0dyb3VwPlxuLy8gICAgICAgICB7dG9vbHRpcERhdGEgJiYgKFxuLy8gICAgICAgICAgIDxjaXJjbGVcbi8vICAgICAgICAgICAgIGN4PXt0b29sdGlwTGVmdH1cbi8vICAgICAgICAgICAgIGN5PXt0b29sdGlwVG9wfVxuLy8gICAgICAgICAgICAgcj17NX1cbi8vICAgICAgICAgICAgIHN0cm9rZT1cImJsYWNrXCJcbi8vICAgICAgICAgICAgIGZpbGw9XCIjZmZjYjhmXCJcbi8vICAgICAgICAgICAgIHN0cm9rZVdpZHRoPXsyfVxuLy8gICAgICAgICAgICAgcG9pbnRlckV2ZW50cz1cIm5vbmVcIlxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgICl9XG4vLyAgICAgICA8L3N2Zz5cbi8vICAgICAgIHt0b29sdGlwRGF0YSAmJiAoXG4vLyAgICAgICAgIDxUb29sdGlwV2l0aEJvdW5kc1xuLy8gICAgICAgICAgIHRvcD17dG9vbHRpcFRvcCAtIDEyfVxuLy8gICAgICAgICAgIGxlZnQ9e3Rvb2x0aXBMZWZ0ICsgMTJ9XG4vLyAgICAgICAgICAgc3R5bGU9e3tcbi8vICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM0ZDRkNGQnLFxuLy8gICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4vLyAgICAgICAgICAgICBwYWRkaW5nOiAnMC41cmVtJyxcbi8vICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4vLyAgICAgICAgICAgICBmb250U2l6ZTogJzEwcHgnLFxuLy8gICAgICAgICAgIH19XG4vLyAgICAgICAgID5cbi8vICAgICAgICAgICA8ZGl2PkRhdGU6IHt0aW1lRm9ybWF0KCclYiAlZCwgJVknKSh4QWNjZXNzb3IodG9vbHRpcERhdGEpKX08L2Rpdj5cbi8vICAgICAgICAgICA8ZGl2PlZhbHVlOiB7eUFjY2Vzc29yKHRvb2x0aXBEYXRhKX08L2Rpdj5cbi8vICAgICAgICAgPC9Ub29sdGlwV2l0aEJvdW5kcz5cbi8vICAgICAgICl9XG4vLyAgICAgPC9kaXY+XG4vLyAgICk7XG4vLyB9XG5cbi8vIGV4cG9ydCB7IExpbmVDaGFydCB9O1xuXG5cblxuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuLy8gaW1wb3J0IHsgZXh0ZW50IH0gZnJvbSAnZDMtYXJyYXknXG4vLyBpbXBvcnQgeyB0aW1lRm9ybWF0IH0gZnJvbSAnZDMtdGltZS1mb3JtYXQnXG4vLyBpbXBvcnQgeyBBeGlzQm90dG9tLCBBeGlzUmlnaHQgfSBmcm9tICdAdmlzeC9heGlzJ1xuLy8gaW1wb3J0IHsgTGluZVBhdGggfSBmcm9tICdAdmlzeC9zaGFwZSdcbi8vIGltcG9ydCB7IEdyb3VwIH0gZnJvbSAnQHZpc3gvZ3JvdXAnXG4vLyBpbXBvcnQgeyBzY2FsZUxpbmVhciwgc2NhbGVUaW1lIH0gZnJvbSAnQHZpc3gvc2NhbGUnXG4vLyBpbXBvcnQgeyBHcmlkUm93cyB9IGZyb20gXCJAdmlzeC9ncmlkXCI7XG4vLyBpbXBvcnQgeyBjdXJ2ZUxpbmVhciB9IGZyb20gJ0B2aXN4L2N1cnZlJ1xuXG4vLyBpbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi4vZGF0YS9saW5lLWNoYXJ0J1xuLy8gaW1wb3J0IHsgZ2V0RGltZW5zaW9ucywgeEFjY2Vzc29yLCB5QWNjZXNzb3IgfSBmcm9tICcjL3V0aWxzL2xpbmUtY2hhcnQnXG5cbi8vIHR5cGUgUHJvcHMgPSB7XG4vLyAgIHdpZHRoOiBudW1iZXJcbi8vICAgaGVpZ2h0OiBudW1iZXJcbi8vIH1cblxuLy8gZnVuY3Rpb24gTGluZUNoYXJ0KHsgd2lkdGgsIGhlaWdodCB9OiBQcm9wcykge1xuLy8gICBjb25zdCB7IG1hcmdpbiwgYm91bmRlZFdpZHRoLCBib3VuZGVkSGVpZ2h0IH0gPSBnZXREaW1lbnNpb25zKHtcbi8vICAgICB3aWR0aCxcbi8vICAgICBoZWlnaHQsXG4vLyAgIH0pXG5cbi8vICAgY29uc3QgTHBZVmFsdWUgPSA1NDMwMC4yOyBcbi8vICAgY29uc3QgTGF0ZXN0VmFsdWUgPSA1OTk4MC45O1xuXG4vLyAgIGNvbnN0IHhTY2FsZSA9IHVzZU1lbW8oXG4vLyAgICAgKCkgPT5cbi8vICAgICAgIHNjYWxlVGltZTxudW1iZXI+KHtcbi8vICAgICAgICAgZG9tYWluOiBleHRlbnQoZGF0YSwgeEFjY2Vzc29yKSBhcyBbRGF0ZSwgRGF0ZV0sXG4vLyAgICAgICAgIHJhbmdlOiBbMCwgYm91bmRlZFdpZHRoXSxcbi8vICAgICAgICAgbmljZTogdHJ1ZSxcbi8vICAgICAgIH0pLFxuLy8gICAgIFtib3VuZGVkV2lkdGhdXG4vLyAgIClcblxuLy8gICBjb25zdCB5U2NhbGUgPSB1c2VNZW1vKFxuLy8gICAgICgpID0+XG4vLyAgICAgICBzY2FsZUxpbmVhcjxudW1iZXI+KHtcbi8vICAgICAgICAgZG9tYWluOiBleHRlbnQoZGF0YSwgeUFjY2Vzc29yKSBhcyBbbnVtYmVyLCBudW1iZXJdLFxuLy8gICAgICAgICByYW5nZTogW2JvdW5kZWRIZWlnaHQsIDBdLFxuLy8gICAgICAgICBuaWNlOiB0cnVlLFxuLy8gICAgICAgfSksXG4vLyAgICAgW2JvdW5kZWRIZWlnaHRdXG4vLyAgIClcblxuLy8gICBjb25zdCBjdXN0b21ZUG9zaXRpb24gPSB5U2NhbGUoTHBZVmFsdWUpOyBcblxuLy8gICAvLyBHZW5lcmF0ZSB5LWF4aXMgdGljayB2YWx1ZXMgYW5kIGVuc3VyZSBib3RoIExwWVZhbHVlIGFuZCBMYXRlc3RWYWx1ZSBhcmUgaW5jbHVkZWRcbi8vICAgY29uc3QgeVRpY2tWYWx1ZXMgPSB5U2NhbGUudGlja3MoOCk7XG5cbi8vICAgaWYgKCF5VGlja1ZhbHVlcy5pbmNsdWRlcyhMcFlWYWx1ZSkpIHtcbi8vICAgICB5VGlja1ZhbHVlcy5wdXNoKExwWVZhbHVlKTtcbi8vICAgfVxuLy8gICBpZiAoIXlUaWNrVmFsdWVzLmluY2x1ZGVzKExhdGVzdFZhbHVlKSkge1xuLy8gICAgIHlUaWNrVmFsdWVzLnB1c2goTGF0ZXN0VmFsdWUpO1xuLy8gICB9XG5cbi8vICAgcmV0dXJuIChcbi8vICAgICA8ZGl2IGNsYXNzTmFtZT1cInctZml0XCI+XG4vLyAgICAgICA8c3ZnXG4vLyAgICAgICAgIGNsYXNzTmFtZT0nJ1xuLy8gICAgICAgICB3aWR0aD17d2lkdGh9XG4vLyAgICAgICAgIGhlaWdodD17aGVpZ2h0fVxuLy8gICAgICAgICByb2xlPVwiZmlndXJlXCJcbi8vICAgICAgID5cbi8vICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgIHg9ezB9XG4vLyAgICAgICAgICAgICB5PXswfVxuLy8gICAgICAgICAgICAgd2lkdGg9e3dpZHRofVxuLy8gICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHR9XG4vLyAgICAgICAgIC8+XG4vLyAgICAgICAgIDx0aXRsZT5saW5lIGNoYXJ0IGxvb2tpbmcgYXQgdGhlIGRpc3RyaWJ1dGlvbiBvZiBtYXggdGVtcGVyYXR1cmU8L3RpdGxlPlxuLy8gICAgICAgICA8R3JvdXAgdG9wPXttYXJnaW4udG9wfSBsZWZ0PXttYXJnaW4ubGVmdH0+XG4vLyAgICAgICAgICAgPEdyaWRSb3dzXG4vLyAgICAgICAgICAgICBzY2FsZT17eVNjYWxlfVxuLy8gICAgICAgICAgICAgd2lkdGg9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgIHN0cm9rZURhc2hhcnJheT1cIjEsM1wiXG4vLyAgICAgICAgICAgICBzdHJva2U9XCIjMjYyNjI2XCJcbi8vICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICAgIDxMaW5lUGF0aFxuLy8gICAgICAgICAgICAgY3VydmU9e2N1cnZlTGluZWFyfVxuLy8gICAgICAgICAgICAgZGF0YT17ZGF0YX1cbi8vICAgICAgICAgICAgIHN0cm9rZT17XCIjRkZDQTQzXCJ9XG4vLyAgICAgICAgICAgICBzdHJva2VXaWR0aD17MS41fVxuLy8gICAgICAgICAgICAgeD17KGQpID0+IHhTY2FsZSh4QWNjZXNzb3IoZCkpID8/IDB9XG4vLyAgICAgICAgICAgICB5PXsoZCkgPT4geVNjYWxlKHlBY2Nlc3NvcihkKSkgPz8gMH1cbi8vICAgICAgICAgICAvPlxuXG4vLyAgICAgICAgICAge2N1c3RvbVlQb3NpdGlvbiAmJiAoXG4vLyAgICAgICAgICAgICA8bGluZVxuLy8gICAgICAgICAgICAgICB4MT17MH1cbi8vICAgICAgICAgICAgICAgeDI9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgICAgeTE9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgeTI9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlPVwid2hpdGVcIlxuLy8gICAgICAgICAgICAgICBzdHJva2VXaWR0aD17MX1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5PVwiMyw1XCIgXG4vLyAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICl9XG5cbi8vICAgICAgICAgICA8QXhpc1JpZ2h0XG4vLyAgICAgICAgICAgICBsZWZ0PXtib3VuZGVkV2lkdGggKyBtYXJnaW4ucmlnaHQgLSA0MH1cbi8vICAgICAgICAgICAgIHNjYWxlPXt5U2NhbGV9XG4vLyAgICAgICAgICAgICB0b3A9ezB9XG4vLyAgICAgICAgICAgICBoaWRlQXhpc0xpbmU9e3RydWV9XG4vLyAgICAgICAgICAgICBoaWRlVGlja3M9e3RydWV9XG4vLyAgICAgICAgICAgICBsYWJlbE9mZnNldD17MH1cbi8vICAgICAgICAgICAgIHRpY2tWYWx1ZXM9e3lUaWNrVmFsdWVzfVxuLy8gICAgICAgICAgICAgdGlja0Zvcm1hdD17KHZhbHVlKSA9PiBgJHtOdW1iZXIodmFsdWUpLnRvRml4ZWQoMSl9YH0gXG4vLyAgICAgICAgICAgICB0aWNrTGFiZWxQcm9wcz17KCkgPT4gKHtcbi8vICAgICAgICAgICAgICAgZmlsbDogJyNBNkE2QTYnLFxuLy8gICAgICAgICAgICAgICBmb250U2l6ZTogOSxcbi8vICAgICAgICAgICAgICAgdGV4dEFuY2hvcjogJ3N0YXJ0Jyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgICAgdGlja0NvbXBvbmVudD17KHsgZm9ybWF0dGVkVmFsdWUsIHgsIHkgfSkgPT4ge1xuLy8gICAgICAgICAgICAgICBpZiAoZm9ybWF0dGVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyBcbi8vICAgICAgICAgICAgICAgfVxuXG4vLyAgICAgICAgICAgICAgIGNvbnN0IG51bUZvcm1hdHRlZFZhbHVlID0gTnVtYmVyKGZvcm1hdHRlZFZhbHVlKTsgXG4vLyAgICAgICAgICAgICAgIGNvbnN0IGlzTFBWYWx1ZSA9IG51bUZvcm1hdHRlZFZhbHVlID09PSBMcFlWYWx1ZTtcbi8vICAgICAgICAgICAgICAgY29uc3QgaXNMYXRlc3RWYWx1ZSA9IG51bUZvcm1hdHRlZFZhbHVlID09PSBMYXRlc3RWYWx1ZTtcblxuLy8gICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gaXNMUFZhbHVlXG4vLyAgICAgICAgICAgICAgICAgPyBgTFAgJHtMcFlWYWx1ZS50b0ZpeGVkKDEpfWBcbi8vICAgICAgICAgICAgICAgICA6IGlzTGF0ZXN0VmFsdWVcbi8vICAgICAgICAgICAgICAgICA/IGAke0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9YFxuLy8gICAgICAgICAgICAgICAgIDogZm9ybWF0dGVkVmFsdWU7XG5cbi8vICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ1ggPSA4OyBcbi8vICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZ1kgPSAyOyBcbi8vICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSA5O1xuXG4vLyAgICAgICAgICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IHRleHQubGVuZ3RoICogKGZvbnRTaXplICogMC42KTsgLy8gRXN0aW1hdGUgdGhhdCBlYWNoIGNoYXJhY3RlciBpcyB+NjAlIG9mIHRoZSBmb250IHNpemVcbi8vICAgICAgICAgICAgICAgY29uc3QgcmVjdFdpZHRoID0gdGV4dFdpZHRoICsgcGFkZGluZ1g7IC8vIEFkZCBwYWRkaW5nIGZvciB3aWR0aFxuLy8gICAgICAgICAgICAgICBjb25zdCByZWN0SGVpZ2h0ID0gZm9udFNpemUgKyBwYWRkaW5nWTsgLy8gQWRkIHBhZGRpbmcgZm9yIGhlaWdodFxuXG4vLyAgICAgICAgICAgICAgIGlmIChpc0xQVmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sJHt5fSlgfT5cbi8vICAgICAgICAgICAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgeT17LXJlY3RIZWlnaHQgLyAyfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtyZWN0V2lkdGh9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjNGQ0ZDRkXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICByeD17MH0gXG4vLyAgICAgICAgICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgICAgICAgICAgIDx0ZXh0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZHk9XCIwLjMyZW1cIlxuLy8gICAgICAgICAgICAgICAgICAgICAgIHg9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgTFAge0xwWVZhbHVlLnRvRml4ZWQoMSl9XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cbi8vICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTGF0ZXN0VmFsdWUpIHtcbi8vICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sJHt5fSlgfT5cbi8vICAgICAgICAgICAgICAgICAgICAgPHJlY3Rcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgeT17LXJlY3RIZWlnaHQgLyAyfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPXtyZWN0V2lkdGh9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJ3aGl0ZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgcng9ezB9IFxuLy8gICAgICAgICAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICAgICAgICAgICA8dGV4dFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCJibGFja1wiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodD1cIjcwMFwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU9e2ZvbnRTaXplfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHRleHRBbmNob3I9XCJtaWRkbGVcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgIGR5PVwiMC4zMmVtXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICB4PXswfVxuLy8gICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAge0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD5cbi8vICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgIHJldHVybiAoXG4vLyAgICAgICAgICAgICAgICAgICA8dGV4dFxuLy8gICAgICAgICAgICAgICAgICAgICBmaWxsPVwiI0E2QTZBNlwiXG4vLyAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplPXtmb250U2l6ZX1cbi8vICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cInN0YXJ0XCJcbi8vICAgICAgICAgICAgICAgICAgICAgZHk9XCIwLjMyZW1cIlxuLy8gICAgICAgICAgICAgICAgICAgICB4PXstMTB9XG4vLyAgICAgICAgICAgICAgICAgICAgIHk9e3l9XG4vLyAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgIHt0ZXh0fVxuLy8gICAgICAgICAgICAgICAgICAgPC90ZXh0PlxuLy8gICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIH19XG4vLyAgICAgICAgICAgLz5cbi8vICAgICAgICAgICA8QXhpc0JvdHRvbVxuLy8gICAgICAgICAgICAgcmFuZ2VQYWRkaW5nPXs0MX1cbi8vICAgICAgICAgICAgIHRvcD17Ym91bmRlZEhlaWdodH1cbi8vICAgICAgICAgICAgIGhpZGVBeGlzTGluZT17dHJ1ZX1cbi8vICAgICAgICAgICAgIGhpZGVUaWNrcz17dHJ1ZX1cbi8vICAgICAgICAgICAgIHNjYWxlPXt4U2NhbGV9XG4vLyAgICAgICAgICAgICB0aWNrRm9ybWF0PXsoZCkgPT4ge1xuLy8gICAgICAgICAgICAgICByZXR1cm4gZCBpbnN0YW5jZW9mIERhdGUgPyB0aW1lRm9ybWF0KCclSDolTScpKGQpIDogJyc7XG4vLyAgICAgICAgICAgICB9fVxuLy8gICAgICAgICAgICAgdGlja0xhYmVsUHJvcHM9eygpID0+ICh7XG4vLyAgICAgICAgICAgICAgIGZpbGw6ICd3aGl0ZScsXG4vLyAgICAgICAgICAgICAgIGZvbnRTaXplOiA4LFxuLy8gICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiAnbWlkZGxlJyxcbi8vICAgICAgICAgICAgIH0pfVxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgIDwvR3JvdXA+XG4vLyAgICAgICA8L3N2Zz5cbi8vICAgICA8L2Rpdj5cbi8vICAgKVxuLy8gfVxuXG4vLyBleHBvcnQgeyBMaW5lQ2hhcnQgfVxuXG5cbi8vICd1c2UgY2xpZW50J1xuXG4vLyBpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBleHRlbnQsIGJpc2VjdG9yLCBtYXgsIG1pbiB9IGZyb20gJ2QzLWFycmF5Jztcbi8vIGltcG9ydCB7IHRpbWVGb3JtYXQgfSBmcm9tICdkMy10aW1lLWZvcm1hdCc7XG4vLyBpbXBvcnQgeyBBeGlzQm90dG9tLCBBeGlzUmlnaHQgfSBmcm9tICdAdmlzeC9heGlzJztcbi8vIGltcG9ydCB7IExpbmVQYXRoIH0gZnJvbSAnQHZpc3gvc2hhcGUnO1xuLy8gaW1wb3J0IHsgR3JvdXAgfSBmcm9tICdAdmlzeC9ncm91cCc7XG4vLyBpbXBvcnQgeyBzY2FsZUxpbmVhciwgc2NhbGVUaW1lIH0gZnJvbSAnQHZpc3gvc2NhbGUnO1xuLy8gaW1wb3J0IHsgR3JpZFJvd3MgfSBmcm9tICdAdmlzeC9ncmlkJztcbi8vIGltcG9ydCB7IGN1cnZlTGluZWFyIH0gZnJvbSAnQHZpc3gvY3VydmUnO1xuLy8gaW1wb3J0IHsgdXNlVG9vbHRpcCwgVG9vbHRpcFdpdGhCb3VuZHMgfSBmcm9tICdAdmlzeC90b29sdGlwJztcbi8vIGltcG9ydCB7IGxvY2FsUG9pbnQgfSBmcm9tICdAdmlzeC9ldmVudCc7XG5cbi8vIGltcG9ydCB7IGRhdGEgfSBmcm9tICcuLi9kYXRhL2xpbmUtY2hhcnQnO1xuLy8gaW1wb3J0IHsgZ2V0RGltZW5zaW9ucywgeEFjY2Vzc29yLCB5QWNjZXNzb3IgfSBmcm9tICcjL3V0aWxzL2xpbmUtY2hhcnQnO1xuXG4vLyB0eXBlIFByb3BzID0ge1xuLy8gICB3aWR0aDogbnVtYmVyO1xuLy8gICBoZWlnaHQ6IG51bWJlcjtcbi8vIH07XG5cbi8vIGZ1bmN0aW9uIExpbmVDaGFydCh7IHdpZHRoLCBoZWlnaHQgfTogUHJvcHMpIHtcbi8vICAgY29uc3QgeyBtYXJnaW4sIGJvdW5kZWRXaWR0aCwgYm91bmRlZEhlaWdodCB9ID0gZ2V0RGltZW5zaW9ucyh7XG4vLyAgICAgd2lkdGgsXG4vLyAgICAgaGVpZ2h0LFxuLy8gICB9KTtcblxuLy8gICBjb25zdCBMcFlWYWx1ZSA9IDU0MzAwLjI7XG4vLyAgIGNvbnN0IExhdGVzdFZhbHVlID0gNTk5ODAuOTtcblxuLy8gICBjb25zdCB4U2NhbGUgPSB1c2VNZW1vKFxuLy8gICAgICgpID0+XG4vLyAgICAgICBzY2FsZVRpbWU8bnVtYmVyPih7XG4vLyAgICAgICAgIGRvbWFpbjogZXh0ZW50KGRhdGEsIHhBY2Nlc3NvcikgYXMgW0RhdGUsIERhdGVdLFxuLy8gICAgICAgICByYW5nZTogWzAsIGJvdW5kZWRXaWR0aF0sXG4vLyAgICAgICAgIG5pY2U6IHRydWUsXG4vLyAgICAgICB9KSxcbi8vICAgICBbYm91bmRlZFdpZHRoXVxuLy8gICApO1xuXG4vLyAgIGNvbnN0IHlTY2FsZSA9IHVzZU1lbW8oXG4vLyAgICAgKCkgPT5cbi8vICAgICAgIHNjYWxlTGluZWFyPG51bWJlcj4oe1xuLy8gICAgICAgICBkb21haW46IGV4dGVudChkYXRhLCB5QWNjZXNzb3IpIGFzIFtudW1iZXIsIG51bWJlcl0sXG4vLyAgICAgICAgIHJhbmdlOiBbYm91bmRlZEhlaWdodCwgMF0sXG4vLyAgICAgICAgIG5pY2U6IHRydWUsXG4vLyAgICAgICB9KSxcbi8vICAgICBbYm91bmRlZEhlaWdodF1cbi8vICAgKTtcblxuLy8gICBjb25zdCB7IHNob3dUb29sdGlwLCBoaWRlVG9vbHRpcCwgdG9vbHRpcERhdGEsIHRvb2x0aXBMZWZ0LCB0b29sdGlwVG9wIH0gPSB1c2VUb29sdGlwKCk7XG5cbi8vICAgY29uc3QgaGFuZGxlVG9vbHRpcCA9IHVzZUNhbGxiYWNrKFxuLy8gICAgIChldmVudDogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuLy8gICAgICAgY29uc3QgeyB4IH0gPSBsb2NhbFBvaW50KGV2ZW50KSB8fCB7IHg6IDAgfTtcbi8vICAgICAgIGNvbnN0IHgwID0geFNjYWxlLmludmVydCh4ICk7IC8vIENvcnJlY3RseSBoYW5kbGUgbWFyZ2luIG9mZnNldFxuICBcbi8vICAgICAgIGNvbnN0IGJpc2VjdERhdGUgPSBiaXNlY3Rvcih4QWNjZXNzb3IpLmxlZnQ7XG4vLyAgICAgICBjb25zdCBpbmRleCA9IGJpc2VjdERhdGUoZGF0YSwgeDAsIDEpO1xuLy8gICAgICAgY29uc3QgZDAgPSBkYXRhW2luZGV4IC0gMV07XG4vLyAgICAgICBjb25zdCBkMSA9IGRhdGFbaW5kZXhdO1xuXG4vLyAgICAgICBsZXQgZCA9IGQwO1xuLy8gICAgICAgaWYgKGQxICYmIHhBY2Nlc3NvcihkMSkpIHtcbi8vICAgICAgICAgZCA9IHgwIC0geEFjY2Vzc29yKGQwKSA+IHhBY2Nlc3NvcihkMSkgLSB4MCA/IGQxIDogZDA7XG4vLyAgICAgICB9XG4gIFxuLy8gICAgICAgc2hvd1Rvb2x0aXAoe1xuLy8gICAgICAgICB0b29sdGlwRGF0YTogZCxcbi8vICAgICAgICAgdG9vbHRpcExlZnQ6IHhTY2FsZSh4QWNjZXNzb3IoZCkpLFxuLy8gICAgICAgICB0b29sdGlwVG9wOiB5U2NhbGUoeUFjY2Vzc29yKGQpKSxcbi8vICAgICAgIH0pO1xuLy8gICAgIH0sXG4vLyAgICAgW3hTY2FsZSwgeVNjYWxlLCBzaG93VG9vbHRpcF1cbi8vICAgKTtcbiAgXG4gIFxuXG4vLyAgIGNvbnN0IGN1c3RvbVlQb3NpdGlvbiA9IHlTY2FsZShMcFlWYWx1ZSk7XG5cbi8vICAgY29uc3QgeVRpY2tWYWx1ZXMgPSB5U2NhbGUudGlja3MoOCk7XG4vLyAgIGlmICgheVRpY2tWYWx1ZXMuaW5jbHVkZXMoTHBZVmFsdWUpKSB5VGlja1ZhbHVlcy5wdXNoKExwWVZhbHVlKTtcbi8vICAgaWYgKCF5VGlja1ZhbHVlcy5pbmNsdWRlcyhMYXRlc3RWYWx1ZSkpIHlUaWNrVmFsdWVzLnB1c2goTGF0ZXN0VmFsdWUpO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZpdFwiPlxuLy8gICAgICAgPHN2ZyBjbGFzc05hbWU9XCJcIiB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSByb2xlPVwiZmlndXJlXCI+XG4vLyAgICAgICAgIDxyZWN0IHg9ezB9IHk9ezB9IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IC8+XG4vLyAgICAgICAgIDxHcm91cCB0b3A9e21hcmdpbi50b3B9IGxlZnQ9e21hcmdpbi5sZWZ0fT5cbi8vICAgICAgICAgICA8R3JpZFJvd3Ncbi8vICAgICAgICAgICAgIHNjYWxlPXt5U2NhbGV9XG4vLyAgICAgICAgICAgICB3aWR0aD17Ym91bmRlZFdpZHRofVxuLy8gICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5PVwiMSwzXCJcbi8vICAgICAgICAgICAgIHN0cm9rZT1cIiMyNjI2MjZcIlxuLy8gICAgICAgICAgICAgcG9pbnRlckV2ZW50cz1cIm5vbmVcIlxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgPExpbmVQYXRoXG4vLyAgICAgICAgICAgICBjdXJ2ZT17Y3VydmVMaW5lYXJ9XG4vLyAgICAgICAgICAgICBkYXRhPXtkYXRhfVxuLy8gICAgICAgICAgICAgc3Ryb2tlPXsnI0ZGQ0E0Myd9XG4vLyAgICAgICAgICAgICBzdHJva2VXaWR0aD17MS41fVxuLy8gICAgICAgICAgICAgeD17KGQpID0+IHhTY2FsZSh4QWNjZXNzb3IoZCkpID8/IDB9XG4vLyAgICAgICAgICAgICB5PXsoZCkgPT4geVNjYWxlKHlBY2Nlc3NvcihkKSkgPz8gMH1cbi8vICAgICAgICAgICAvPlxuXG4vLyAgICAgICAgICAge2N1c3RvbVlQb3NpdGlvbiAmJiAoXG4vLyAgICAgICAgICAgICA8bGluZVxuLy8gICAgICAgICAgICAgICB4MT17MH1cbi8vICAgICAgICAgICAgICAgeDI9e2JvdW5kZWRXaWR0aH1cbi8vICAgICAgICAgICAgICAgeTE9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgeTI9e2N1c3RvbVlQb3NpdGlvbn1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlPVwid2hpdGVcIlxuLy8gICAgICAgICAgICAgICBzdHJva2VXaWR0aD17MX1cbi8vICAgICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5PVwiMyw1XCJcbi8vICAgICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgKX1cblxuLy8gICAgICAgICAgIDxBeGlzUmlnaHRcbi8vICAgICAgICAgICAgIGxlZnQ9e2JvdW5kZWRXaWR0aCArIG1hcmdpbi5yaWdodCAtIDQwfVxuLy8gICAgICAgICAgICAgc2NhbGU9e3lTY2FsZX1cbi8vICAgICAgICAgICAgIHRvcD17MH1cbi8vICAgICAgICAgICAgIGhpZGVBeGlzTGluZT17dHJ1ZX1cbi8vICAgICAgICAgICAgIGhpZGVUaWNrcz17dHJ1ZX1cbi8vICAgICAgICAgICAgIHRpY2tWYWx1ZXM9e3lUaWNrVmFsdWVzfVxuLy8gICAgICAgICAgICAgdGlja0Zvcm1hdD17KHZhbHVlKSA9PiBgJHtOdW1iZXIodmFsdWUpLnRvRml4ZWQoMSl9YH1cbi8vICAgICAgICAgICAgIHRpY2tMYWJlbFByb3BzPXsoKSA9PiAoe1xuLy8gICAgICAgICAgICAgICBmaWxsOiAnI0E2QTZBNicsXG4vLyAgICAgICAgICAgICAgIGZvbnRTaXplOiA5LFxuLy8gICAgICAgICAgICAgICB0ZXh0QW5jaG9yOiAnc3RhcnQnLFxuLy8gICAgICAgICAgICAgfSl9XG4vLyAgICAgICAgICAgICB0aWNrQ29tcG9uZW50PXsoe1xuLy8gICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSwgeCwgeSB9KSA9PiB7XG4vLyAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbi8vICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyBcbi8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IG51bUZvcm1hdHRlZFZhbHVlID0gTnVtYmVyKGZvcm1hdHRlZFZhbHVlKTsgXG4vLyAgICAgICAgICAgICAgICAgY29uc3QgaXNMUFZhbHVlID0gbnVtRm9ybWF0dGVkVmFsdWUgPT09IExwWVZhbHVlO1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGlzTGF0ZXN0VmFsdWUgPSBudW1Gb3JtYXR0ZWRWYWx1ZSA9PT0gTGF0ZXN0VmFsdWU7XG4gICAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBpc0xQVmFsdWVcbi8vICAgICAgICAgICAgICAgICAgID8gYExQICR7THBZVmFsdWUudG9GaXhlZCgxKX1gXG4vLyAgICAgICAgICAgICAgICAgICA6IGlzTGF0ZXN0VmFsdWVcbi8vICAgICAgICAgICAgICAgICAgID8gYCR7TGF0ZXN0VmFsdWUudG9GaXhlZCgxKX1gXG4vLyAgICAgICAgICAgICAgICAgICA6IGZvcm1hdHRlZFZhbHVlO1xuICBcbi8vICAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nWCA9IDg7IFxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmdZID0gMjsgXG4vLyAgICAgICAgICAgICAgICAgY29uc3QgZm9udFNpemUgPSA5O1xuICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSB0ZXh0Lmxlbmd0aCAqIChmb250U2l6ZSAqIDAuNik7IC8vIEVzdGltYXRlIHRoYXQgZWFjaCBjaGFyYWN0ZXIgaXMgfjYwJSBvZiB0aGUgZm9udCBzaXplXG4vLyAgICAgICAgICAgICAgICAgY29uc3QgcmVjdFdpZHRoID0gdGV4dFdpZHRoICsgcGFkZGluZ1g7IC8vIEFkZCBwYWRkaW5nIGZvciB3aWR0aFxuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHJlY3RIZWlnaHQgPSBmb250U2l6ZSArIHBhZGRpbmdZOyAvLyBBZGQgcGFkZGluZyBmb3IgaGVpZ2h0XG4gICAgXG4vLyAgICAgICAgICAgICAgICAgaWYgKGlzTFBWYWx1ZSkge1xuLy8gICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbi8vICAgICAgICAgICAgICAgICAgICAgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eH0sJHt5fSlgfT5cbi8vICAgICAgICAgICAgICAgICAgICAgICA8cmVjdFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgeD17LXJlY3RXaWR0aCAvIDJ9IFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgeT17LXJlY3RIZWlnaHQgLyAyfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9e3JlY3RXaWR0aH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17cmVjdEhlaWdodH1cbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjNGQ0ZDRkXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHJ4PXswfSBcbi8vICAgICAgICAgICAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwid2hpdGVcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU9e2ZvbnRTaXplfVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBkeT1cIjAuMzJlbVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB4PXswfSBcbi8vICAgICAgICAgICAgICAgICAgICAgICA+XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBMUCB7THBZVmFsdWUudG9GaXhlZCgxKX1cbi8vICAgICAgICAgICAgICAgICAgICAgICA8L3RleHQ+XG4vLyAgICAgICAgICAgICAgICAgICAgIDwvZz5cbi8vICAgICAgICAgICAgICAgICAgICk7XG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0xhdGVzdFZhbHVlKSB7XG4vLyAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHt4fSwke3l9KWB9PlxuLy8gICAgICAgICAgICAgICAgICAgICAgIDxyZWN0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB4PXstcmVjdFdpZHRoIC8gMn0gXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB5PXstcmVjdEhlaWdodCAvIDJ9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD17cmVjdFdpZHRofVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PXtyZWN0SGVpZ2h0fVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cIndoaXRlXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHJ4PXswfSBcbi8vICAgICAgICAgICAgICAgICAgICAgICAvPlxuLy8gICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVwiYmxhY2tcIlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodD1cIjcwMFwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0QW5jaG9yPVwibWlkZGxlXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIGR5PVwiMC4zMmVtXCJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHg9ezB9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgPlxuLy8gICAgICAgICAgICAgICAgICAgICAgICAge0xhdGVzdFZhbHVlLnRvRml4ZWQoMSl9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxuLy8gICAgICAgICAgICAgICAgICAgICA8L2c+XG4vLyAgICAgICAgICAgICAgICAgICApO1xuLy8gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuLy8gICAgICAgICAgICAgICAgICAgICA8dGV4dFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XCIjQTZBNkE2XCJcbi8vICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZT17Zm9udFNpemV9XG4vLyAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFuY2hvcj1cInN0YXJ0XCJcbi8vICAgICAgICAgICAgICAgICAgICAgICBkeT1cIjAuMzJlbVwiXG4vLyAgICAgICAgICAgICAgICAgICAgICAgeD17LTEwfVxuLy8gICAgICAgICAgICAgICAgICAgICAgIHk9e3l9XG4vLyAgICAgICAgICAgICAgICAgICAgID5cbi8vICAgICAgICAgICAgICAgICAgICAgICB7dGV4dH1cbi8vICAgICAgICAgICAgICAgICAgICAgPC90ZXh0PlxuLy8gICAgICAgICAgICAgICAgICAgKTtcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9fVxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgICAgPEF4aXNCb3R0b21cbi8vICAgICAgICAgICAgIHJhbmdlUGFkZGluZz17NDF9XG4vLyAgICAgICAgICAgICB0b3A9e2JvdW5kZWRIZWlnaHR9XG4vLyAgICAgICAgICAgICBoaWRlQXhpc0xpbmU9e3RydWV9XG4vLyAgICAgICAgICAgICBoaWRlVGlja3M9e3RydWV9XG4vLyAgICAgICAgICAgICBzY2FsZT17eFNjYWxlfVxuLy8gICAgICAgICAgICAgdGlja0Zvcm1hdD17KGQpID0+IChkIGluc3RhbmNlb2YgRGF0ZSA/IHRpbWVGb3JtYXQoJyVIOiVNJykoZCkgOiAnJyl9XG4vLyAgICAgICAgICAgICB0aWNrTGFiZWxQcm9wcz17KCkgPT4gKHtcbi8vICAgICAgICAgICAgICAgZmlsbDogJ3doaXRlJyxcbi8vICAgICAgICAgICAgICAgZm9udFNpemU6IDgsXG4vLyAgICAgICAgICAgICAgIHRleHRBbmNob3I6ICdtaWRkbGUnLFxuLy8gICAgICAgICAgICAgfSl9XG4vLyAgICAgICAgICAgLz5cbi8vICAgICAgICAgICA8cmVjdFxuLy8gICAgICAgICAgICAgeD17MH1cbi8vICAgICAgICAgICAgIHk9ezB9XG4vLyAgICAgICAgICAgICB3aWR0aD17Ym91bmRlZFdpZHRofVxuLy8gICAgICAgICAgICAgaGVpZ2h0PXtib3VuZGVkSGVpZ2h0fVxuLy8gICAgICAgICAgICAgZmlsbD1cInRyYW5zcGFyZW50XCJcbi8vICAgICAgICAgICAgIG9uTW91c2VNb3ZlPXtoYW5kbGVUb29sdGlwfVxuLy8gICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBoaWRlVG9vbHRpcCgpfVxuLy8gICAgICAgICAgIC8+XG4vLyAgICAgICAgIDwvR3JvdXA+XG4vLyAgICAgICAgIHt0b29sdGlwRGF0YSAmJiAoXG4vLyAgICAgICAgICAgPGNpcmNsZVxuLy8gICAgICAgICAgICAgY3g9e3Rvb2x0aXBMZWZ0ICsgMTR9XG4vLyAgICAgICAgICAgICBjeT17dG9vbHRpcFRvcCArIDEyIH1cbi8vICAgICAgICAgICAgIHI9ezV9XG4vLyAgICAgICAgICAgICBzdHJva2U9XCJibGFja1wiXG4vLyAgICAgICAgICAgICBmaWxsPVwiI2ZmY2I4ZlwiXG4vLyAgICAgICAgICAgICBzdHJva2VXaWR0aD17Mn1cbi8vICAgICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbi8vICAgICAgICAgICAvPlxuLy8gICAgICAgICApfVxuLy8gICAgICAgPC9zdmc+XG4vLyAgICAgICB7dG9vbHRpcERhdGEgJiYgKFxuLy8gICAgICAgICA8VG9vbHRpcFdpdGhCb3VuZHNcbi8vICAgICAgICAgICB0b3A9e3Rvb2x0aXBUb3AtMjUwfVxuLy8gICAgICAgICAgIGxlZnQ9e3Rvb2x0aXBMZWZ0fVxuLy8gICAgICAgICAgIHN0eWxlPXt7XG4vLyAgICAgICAgICAgICB3aWR0aDogJzEyMHB4Jyxcbi8vICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyM0ZDRkNGQnLFxuLy8gICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4vLyAgICAgICAgICAgICBwYWRkaW5nOiAnMC41cmVtJyxcbi8vICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4vLyAgICAgICAgICAgICBmb250U2l6ZTogJzEwcHgnLFxuLy8gICAgICAgICAgIH19XG4vLyAgICAgICAgID5cbi8vICAgICAgICAgICA8ZGl2PkRhdGU6IHt0aW1lRm9ybWF0KCclYiAlZCwgJVknKSh4QWNjZXNzb3IodG9vbHRpcERhdGEpKX08L2Rpdj5cbi8vICAgICAgICAgICA8ZGl2PlZhbHVlOiB7eUFjY2Vzc29yKHRvb2x0aXBEYXRhKX08L2Rpdj5cbi8vICAgICAgICAgPC9Ub29sdGlwV2l0aEJvdW5kcz5cbi8vICAgICAgICl9XG4vLyAgICAgPC9kaXY+XG4vLyAgICk7XG4vLyB9XG5cbi8vIGV4cG9ydCB7IExpbmVDaGFydCB9O1xuXG5cblxuXG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/line-chart.tsx\n",
        ),
      );

      /***/
    },
});
