"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page", {
  /***/ "(app-pages-browser)/./src/components/line-chart.tsx":
    /*!***************************************!*\
  !*** ./src/components/line-chart.tsx ***!
  \***************************************/
    /***/ function (module, __webpack_exports__, __webpack_require__) {
      eval(
        __webpack_require__.ts(
          '__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-array */ "(app-pages-browser)/./node_modules/d3-array/src/extent.js");\n/* harmony import */ var d3_time_format__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! d3-time-format */ "(app-pages-browser)/./node_modules/d3-time-format/src/defaultLocale.js");\n/* harmony import */ var _visx_shape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @visx/shape */ "(app-pages-browser)/./node_modules/@visx/shape/esm/shapes/LinePath.js");\n/* harmony import */ var _visx_shape__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @visx/shape */ "(app-pages-browser)/./node_modules/@visx/shape/esm/shapes/Bar.js");\n/* harmony import */ var _visx_group__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @visx/group */ "(app-pages-browser)/./node_modules/@visx/group/esm/Group.js");\n/* harmony import */ var _visx_scale__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @visx/scale */ "(app-pages-browser)/./node_modules/@visx/scale/esm/scales/time.js");\n/* harmony import */ var _visx_scale__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @visx/scale */ "(app-pages-browser)/./node_modules/@visx/scale/esm/scales/linear.js");\n/* harmony import */ var _visx_grid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @visx/grid */ "(app-pages-browser)/./node_modules/@visx/grid/esm/grids/GridRows.js");\n/* harmony import */ var _visx_curve__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @visx/curve */ "(app-pages-browser)/./node_modules/d3-shape/src/curve/linear.js");\n/* harmony import */ var _visx_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @visx/tooltip */ "(app-pages-browser)/./node_modules/@visx/tooltip/esm/tooltips/Tooltip.js");\n/* harmony import */ var _visx_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @visx/tooltip */ "(app-pages-browser)/./node_modules/@visx/tooltip/esm/tooltips/TooltipWithBounds.js");\n/* harmony import */ var _visx_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @visx/tooltip */ "(app-pages-browser)/./node_modules/@visx/tooltip/esm/enhancers/withTooltip.js");\n/* harmony import */ var _visx_event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @visx/event */ "(app-pages-browser)/./node_modules/@visx/event/esm/localPoint.js");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! d3-array */ "(app-pages-browser)/./node_modules/d3-array/src/bisector.js");\n/* harmony import */ var _utils_line_chart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! #/utils/line-chart */ "(app-pages-browser)/./src/utils/line-chart.ts");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n// import React, { useMemo } from \'react\'\n// import { extent } from \'d3-array\'\n// import { timeFormat } from \'d3-time-format\'\n// import { AxisBottom, AxisRight } from \'@visx/axis\'\n// import { LinePath } from \'@visx/shape\'\n// import { Group } from \'@visx/group\'\n// import { scaleLinear, scaleTime } from \'@visx/scale\'\n// import { GridRows } from "@visx/grid";\n// import { curveLinear } from \'@visx/curve\'\n// import { data } from \'../data/line-chart\'\n// import { getDimensions, xAccessor, yAccessor } from \'#/utils/line-chart\'\n// type Props = {\n//   width: number\n//   height: number\n// }\n// function LineChart({ width, height }: Props) {\n//   const { margin, boundedWidth, boundedHeight } = getDimensions({\n//     width,\n//     height,\n//   })\n//   const LpYValue = 54300.2; \n//   const LatestValue = 59980.9;\n//   const xScale = useMemo(\n//     () =>\n//       scaleTime<number>({\n//         domain: extent(data, xAccessor) as [Date, Date],\n//         range: [0, boundedWidth],\n//         nice: true,\n//       }),\n//     [boundedWidth]\n//   )\n//   const yScale = useMemo(\n//     () =>\n//       scaleLinear<number>({\n//         domain: extent(data, yAccessor) as [number, number],\n//         range: [boundedHeight, 0],\n//         nice: true,\n//       }),\n//     [boundedHeight]\n//   )\n//   const customYPosition = yScale(LpYValue); \n//   // Generate y-axis tick values and ensure both LpYValue and LatestValue are included\n//   const yTickValues = yScale.ticks(8);\n//   if (!yTickValues.includes(LpYValue)) {\n//     yTickValues.push(LpYValue);\n//   }\n//   if (!yTickValues.includes(LatestValue)) {\n//     yTickValues.push(LatestValue);\n//   }\n//   return (\n//     <div className="w-fit">\n//       <svg\n//         className=\'\'\n//         width={width}\n//         height={height}\n//         role="figure"\n//       >\n//         <rect\n//             x={0}\n//             y={0}\n//             width={width}\n//             height={height}\n//         />\n//         <title>line chart looking at the distribution of max temperature</title>\n//         <Group top={margin.top} left={margin.left}>\n//           <GridRows\n//             scale={yScale}\n//             width={boundedWidth}\n//             strokeDasharray="1,3"\n//             stroke="#262626"\n//             pointerEvents="none"\n//           />\n//           <LinePath\n//             curve={curveLinear}\n//             data={data}\n//             stroke={"#FFCA43"}\n//             strokeWidth={1.5}\n//             x={(d) => xScale(xAccessor(d)) ?? 0}\n//             y={(d) => yScale(yAccessor(d)) ?? 0}\n//           />\n//           {customYPosition && (\n//             <line\n//               x1={0}\n//               x2={boundedWidth}\n//               y1={customYPosition}\n//               y2={customYPosition}\n//               stroke="white"\n//               strokeWidth={1}\n//               strokeDasharray="3,5" \n//             />\n//           )}\n//           <AxisRight\n//             left={boundedWidth + margin.right - 40}\n//             scale={yScale}\n//             top={0}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             labelOffset={0}\n//             tickValues={yTickValues}\n//             tickFormat={(value) => `${Number(value).toFixed(1)}`} \n//             tickLabelProps={() => ({\n//               fill: \'#A6A6A6\',\n//               fontSize: 9,\n//               textAnchor: \'start\',\n//             })}\n//             tickComponent={({ formattedValue, x, y }) => {\n//               if (formattedValue === undefined) {\n//                 return null; \n//               }\n//               const numFormattedValue = Number(formattedValue); \n//               const isLPValue = numFormattedValue === LpYValue;\n//               const isLatestValue = numFormattedValue === LatestValue;\n//               const text = isLPValue\n//                 ? `LP ${LpYValue.toFixed(1)}`\n//                 : isLatestValue\n//                 ? `${LatestValue.toFixed(1)}`\n//                 : formattedValue;\n//               const paddingX = 8; \n//               const paddingY = 2; \n//               const fontSize = 9;\n//               const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n//               const rectWidth = textWidth + paddingX; // Add padding for width\n//               const rectHeight = fontSize + paddingY; // Add padding for height\n//               if (isLPValue) {\n//                 return (\n//                   <g transform={`translate(${x},${y})`}>\n//                     <rect\n//                       x={-rectWidth / 2} \n//                       y={-rectHeight / 2}\n//                       width={rectWidth}\n//                       height={rectHeight}\n//                       fill="#4d4d4d"\n//                       rx={0} \n//                     />\n//                     <text\n//                       fill="white"\n//                       fontSize={fontSize}\n//                       textAnchor="middle"\n//                       dy="0.32em"\n//                       x={0} \n//                     >\n//                       LP {LpYValue.toFixed(1)}\n//                     </text>\n//                   </g>\n//                 );\n//               } else if (isLatestValue) {\n//                 return (\n//                   <g transform={`translate(${x},${y})`}>\n//                     <rect\n//                       x={-rectWidth / 2} \n//                       y={-rectHeight / 2}\n//                       width={rectWidth}\n//                       height={rectHeight}\n//                       fill="white"\n//                       rx={0} \n//                     />\n//                     <text\n//                       fill="black"\n//                       fontWeight="700"\n//                       fontSize={fontSize}\n//                       textAnchor="middle"\n//                       dy="0.32em"\n//                       x={0}\n//                     >\n//                       {LatestValue.toFixed(1)}\n//                     </text>\n//                   </g>\n//                 );\n//               } else {\n//                 return (\n//                   <text\n//                     fill="#A6A6A6"\n//                     fontSize={fontSize}\n//                     textAnchor="start"\n//                     dy="0.32em"\n//                     x={-10}\n//                     y={y}\n//                   >\n//                     {text}\n//                   </text>\n//                 );\n//               }\n//             }}\n//           />\n//           <AxisBottom\n//             rangePadding={41}\n//             top={boundedHeight}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             scale={xScale}\n//             tickFormat={(d) => {\n//               return d instanceof Date ? timeFormat(\'%H:%M\')(d) : \'\';\n//             }}\n//             tickLabelProps={() => ({\n//               fill: \'white\',\n//               fontSize: 8,\n//               textAnchor: \'middle\',\n//             })}\n//           />\n//         </Group>\n//       </svg>\n//     </div>\n//   )\n// }\n// export { LineChart }\n// \'use client\'\n// import React, { useMemo, useCallback } from \'react\';\n// import { extent, bisector, max, min } from \'d3-array\';\n// import { timeFormat } from \'d3-time-format\';\n// import { AxisBottom, AxisRight } from \'@visx/axis\';\n// import { LinePath } from \'@visx/shape\';\n// import { Group } from \'@visx/group\';\n// import { scaleLinear, scaleTime } from \'@visx/scale\';\n// import { GridRows } from \'@visx/grid\';\n// import { curveLinear } from \'@visx/curve\';\n// import { useTooltip, TooltipWithBounds } from \'@visx/tooltip\';\n// import { localPoint } from \'@visx/event\';\n// import { data } from \'../data/line-chart\';\n// import { getDimensions, xAccessor, yAccessor } from \'#/utils/line-chart\';\n// type Props = {\n//   width: number;\n//   height: number;\n// };\n// function LineChart({ width, height }: Props) {\n//   const { margin, boundedWidth, boundedHeight } = getDimensions({\n//     width,\n//     height,\n//   });\n//   const LpYValue = 54300.2;\n//   const LatestValue = 59980.9;\n//   const xScale = useMemo(\n//     () =>\n//       scaleTime<number>({\n//         domain: extent(data, xAccessor) as [Date, Date],\n//         range: [0, boundedWidth],\n//         nice: true,\n//       }),\n//     [boundedWidth]\n//   );\n//   const yScale = useMemo(\n//     () =>\n//       scaleLinear<number>({\n//         domain: extent(data, yAccessor) as [number, number],\n//         range: [boundedHeight, 0],\n//         nice: true,\n//       }),\n//     [boundedHeight]\n//   );\n//   const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } = useTooltip();\n//   const handleTooltip = useCallback(\n//     (event: React.MouseEvent) => {\n//       const { x } = localPoint(event) || { x: 0 };\n//       const x0 = xScale.invert(x - margin.left); // Get the date from x position\n//       const bisectDate = bisector(xAccessor).left;\n//       const index = bisectDate(data, x0, 1);\n//       const d0 = data[index - 1];\n//       const d1 = data[index];\n//       const d = x0 - xAccessor(d0) > xAccessor(d1) - x0 ? d1 : d0; // Get closest data point\n//       showTooltip({\n//         tooltipData: d,\n//         tooltipLeft: xScale(xAccessor(d)),\n//         tooltipTop: yScale(yAccessor(d)),\n//       });\n//     },\n//     [xScale, yScale, showTooltip]\n//   );\n//   const customYPosition = yScale(LpYValue);\n//   const yTickValues = yScale.ticks(8);\n//   if (!yTickValues.includes(LpYValue)) yTickValues.push(LpYValue);\n//   if (!yTickValues.includes(LatestValue)) yTickValues.push(LatestValue);\n//   return (\n//     <div className="w-fit">\n//       <svg className="" width={width} height={height} role="figure">\n//         <rect x={0} y={0} width={width} height={height} />\n//         <Group top={margin.top} left={margin.left}>\n//           <GridRows\n//             scale={yScale}\n//             width={boundedWidth}\n//             strokeDasharray="1,3"\n//             stroke="#262626"\n//             pointerEvents="none"\n//           />\n//           <LinePath\n//             curve={curveLinear}\n//             data={data}\n//             stroke={\'#FFCA43\'}\n//             strokeWidth={1.5}\n//             x={(d) => xScale(xAccessor(d)) ?? 0}\n//             y={(d) => yScale(yAccessor(d)) ?? 0}\n//           />\n//           {customYPosition && (\n//             <line\n//               x1={0}\n//               x2={boundedWidth}\n//               y1={customYPosition}\n//               y2={customYPosition}\n//               stroke="white"\n//               strokeWidth={1}\n//               strokeDasharray="3,5"\n//             />\n//           )}\n//           <AxisRight\n//             left={boundedWidth + margin.right - 40}\n//             scale={yScale}\n//             top={0}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             tickValues={yTickValues}\n//             tickFormat={(value) => `${Number(value).toFixed(1)}`}\n//             tickLabelProps={() => ({\n//               fill: \'#A6A6A6\',\n//               fontSize: 9,\n//               textAnchor: \'start\',\n//             })}\n//             tickComponent={({ formattedValue, x, y }) => {\n//                             if (formattedValue === undefined) {\n//                               return null; \n//                             }\n//                             const numFormattedValue = Number(formattedValue); \n//                             const isLPValue = numFormattedValue === LpYValue;\n//                             const isLatestValue = numFormattedValue === LatestValue;\n//                             const text = isLPValue\n//                               ? `LP ${LpYValue.toFixed(1)}`\n//                               : isLatestValue\n//                               ? `${LatestValue.toFixed(1)}`\n//                               : formattedValue;\n//                             const paddingX = 8; \n//                             const paddingY = 2; \n//                             const fontSize = 9;\n//                             const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n//                             const rectWidth = textWidth + paddingX; // Add padding for width\n//                             const rectHeight = fontSize + paddingY; // Add padding for height\n//                             if (isLPValue) {\n//                               return (\n//                                 <g transform={`translate(${x},${y})`}>\n//                                   <rect\n//                                     x={-rectWidth / 2} \n//                                     y={-rectHeight / 2}\n//                                     width={rectWidth}\n//                                     height={rectHeight}\n//                                     fill="#4d4d4d"\n//                                     rx={0} \n//                                   />\n//                                   <text\n//                                     fill="white"\n//                                     fontSize={fontSize}\n//                                     textAnchor="middle"\n//                                     dy="0.32em"\n//                                     x={0} \n//                                   >\n//                                     LP {LpYValue.toFixed(1)}\n//                                   </text>\n//                                 </g>\n//                               );\n//                             } else if (isLatestValue) {\n//                               return (\n//                                 <g transform={`translate(${x},${y})`}>\n//                                   <rect\n//                                     x={-rectWidth / 2} \n//                                     y={-rectHeight / 2}\n//                                     width={rectWidth}\n//                                     height={rectHeight}\n//                                     fill="white"\n//                                     rx={0} \n//                                   />\n//                                   <text\n//                                     fill="black"\n//                                     fontWeight="700"\n//                                     fontSize={fontSize}\n//                                     textAnchor="middle"\n//                                     dy="0.32em"\n//                                     x={0}\n//                                   >\n//                                     {LatestValue.toFixed(1)}\n//                                   </text>\n//                                 </g>\n//                               );\n//                             } else {\n//                               return (\n//                                 <text\n//                                   fill="#A6A6A6"\n//                                   fontSize={fontSize}\n//                                   textAnchor="start"\n//                                   dy="0.32em"\n//                                   x={-10}\n//                                   y={y}\n//                                 >\n//                                   {text}\n//                                 </text>\n//                               );\n//                             }\n//                           }}\n//           />\n//           <AxisBottom\n//             rangePadding={41}\n//             top={boundedHeight}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             scale={xScale}\n//             tickFormat={(d) => (d instanceof Date ? timeFormat(\'%H:%M\')(d) : \'\')}\n//             tickLabelProps={() => ({\n//               fill: \'white\',\n//               fontSize: 8,\n//               textAnchor: \'middle\',\n//             })}\n//           />\n//           <rect\n//             x={0}\n//             y={0}\n//             width={boundedWidth}\n//             height={boundedHeight}\n//             fill="transparent"\n//             onMouseMove={handleTooltip}\n//             onMouseLeave={() => hideTooltip()}\n//           />\n//         </Group>\n//         {tooltipData && (\n//           <circle\n//             cx={tooltipLeft}\n//             cy={tooltipTop}\n//             r={5}\n//             stroke="black"\n//             fill="#ffcb8f"\n//             strokeWidth={2}\n//             pointerEvents="none"\n//           />\n//         )}\n//       </svg>\n//       {tooltipData && (\n//         <TooltipWithBounds\n//           top={tooltipTop - 12}\n//           left={tooltipLeft + 12}\n//           style={{\n//             backgroundColor: \'#4d4d4d\',\n//             color: \'white\',\n//             padding: \'0.5rem\',\n//             borderRadius: \'4px\',\n//             fontSize: \'10px\',\n//           }}\n//         >\n//           <div>Date: {timeFormat(\'%b %d, %Y\')(xAccessor(tooltipData))}</div>\n//           <div>Value: {yAccessor(tooltipData)}</div>\n//         </TooltipWithBounds>\n//       )}\n//     </div>\n//   );\n// }\n// export { LineChart };\n// import React, { useMemo } from \'react\'\n// import { extent } from \'d3-array\'\n// import { timeFormat } from \'d3-time-format\'\n// import { AxisBottom, AxisRight } from \'@visx/axis\'\n// import { LinePath } from \'@visx/shape\'\n// import { Group } from \'@visx/group\'\n// import { scaleLinear, scaleTime } from \'@visx/scale\'\n// import { GridRows } from "@visx/grid";\n// import { curveLinear } from \'@visx/curve\'\n// import { data } from \'../data/line-chart\'\n// import { getDimensions, xAccessor, yAccessor } from \'#/utils/line-chart\'\n// type Props = {\n//   width: number\n//   height: number\n// }\n// function LineChart({ width, height }: Props) {\n//   const { margin, boundedWidth, boundedHeight } = getDimensions({\n//     width,\n//     height,\n//   })\n//   const LpYValue = 54300.2; \n//   const LatestValue = 59980.9;\n//   const xScale = useMemo(\n//     () =>\n//       scaleTime<number>({\n//         domain: extent(data, xAccessor) as [Date, Date],\n//         range: [0, boundedWidth],\n//         nice: true,\n//       }),\n//     [boundedWidth]\n//   )\n//   const yScale = useMemo(\n//     () =>\n//       scaleLinear<number>({\n//         domain: extent(data, yAccessor) as [number, number],\n//         range: [boundedHeight, 0],\n//         nice: true,\n//       }),\n//     [boundedHeight]\n//   )\n//   const customYPosition = yScale(LpYValue); \n//   // Generate y-axis tick values and ensure both LpYValue and LatestValue are included\n//   const yTickValues = yScale.ticks(8);\n//   if (!yTickValues.includes(LpYValue)) {\n//     yTickValues.push(LpYValue);\n//   }\n//   if (!yTickValues.includes(LatestValue)) {\n//     yTickValues.push(LatestValue);\n//   }\n//   return (\n//     <div className="w-fit">\n//       <svg\n//         className=\'\'\n//         width={width}\n//         height={height}\n//         role="figure"\n//       >\n//         <rect\n//             x={0}\n//             y={0}\n//             width={width}\n//             height={height}\n//         />\n//         <title>line chart looking at the distribution of max temperature</title>\n//         <Group top={margin.top} left={margin.left}>\n//           <GridRows\n//             scale={yScale}\n//             width={boundedWidth}\n//             strokeDasharray="1,3"\n//             stroke="#262626"\n//             pointerEvents="none"\n//           />\n//           <LinePath\n//             curve={curveLinear}\n//             data={data}\n//             stroke={"#FFCA43"}\n//             strokeWidth={1.5}\n//             x={(d) => xScale(xAccessor(d)) ?? 0}\n//             y={(d) => yScale(yAccessor(d)) ?? 0}\n//           />\n//           {customYPosition && (\n//             <line\n//               x1={0}\n//               x2={boundedWidth}\n//               y1={customYPosition}\n//               y2={customYPosition}\n//               stroke="white"\n//               strokeWidth={1}\n//               strokeDasharray="3,5" \n//             />\n//           )}\n//           <AxisRight\n//             left={boundedWidth + margin.right - 40}\n//             scale={yScale}\n//             top={0}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             labelOffset={0}\n//             tickValues={yTickValues}\n//             tickFormat={(value) => `${Number(value).toFixed(1)}`} \n//             tickLabelProps={() => ({\n//               fill: \'#A6A6A6\',\n//               fontSize: 9,\n//               textAnchor: \'start\',\n//             })}\n//             tickComponent={({ formattedValue, x, y }) => {\n//               if (formattedValue === undefined) {\n//                 return null; \n//               }\n//               const numFormattedValue = Number(formattedValue); \n//               const isLPValue = numFormattedValue === LpYValue;\n//               const isLatestValue = numFormattedValue === LatestValue;\n//               const text = isLPValue\n//                 ? `LP ${LpYValue.toFixed(1)}`\n//                 : isLatestValue\n//                 ? `${LatestValue.toFixed(1)}`\n//                 : formattedValue;\n//               const paddingX = 8; \n//               const paddingY = 2; \n//               const fontSize = 9;\n//               const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n//               const rectWidth = textWidth + paddingX; // Add padding for width\n//               const rectHeight = fontSize + paddingY; // Add padding for height\n//               if (isLPValue) {\n//                 return (\n//                   <g transform={`translate(${x},${y})`}>\n//                     <rect\n//                       x={-rectWidth / 2} \n//                       y={-rectHeight / 2}\n//                       width={rectWidth}\n//                       height={rectHeight}\n//                       fill="#4d4d4d"\n//                       rx={0} \n//                     />\n//                     <text\n//                       fill="white"\n//                       fontSize={fontSize}\n//                       textAnchor="middle"\n//                       dy="0.32em"\n//                       x={0} \n//                     >\n//                       LP {LpYValue.toFixed(1)}\n//                     </text>\n//                   </g>\n//                 );\n//               } else if (isLatestValue) {\n//                 return (\n//                   <g transform={`translate(${x},${y})`}>\n//                     <rect\n//                       x={-rectWidth / 2} \n//                       y={-rectHeight / 2}\n//                       width={rectWidth}\n//                       height={rectHeight}\n//                       fill="white"\n//                       rx={0} \n//                     />\n//                     <text\n//                       fill="black"\n//                       fontWeight="700"\n//                       fontSize={fontSize}\n//                       textAnchor="middle"\n//                       dy="0.32em"\n//                       x={0}\n//                     >\n//                       {LatestValue.toFixed(1)}\n//                     </text>\n//                   </g>\n//                 );\n//               } else {\n//                 return (\n//                   <text\n//                     fill="#A6A6A6"\n//                     fontSize={fontSize}\n//                     textAnchor="start"\n//                     dy="0.32em"\n//                     x={-10}\n//                     y={y}\n//                   >\n//                     {text}\n//                   </text>\n//                 );\n//               }\n//             }}\n//           />\n//           <AxisBottom\n//             rangePadding={41}\n//             top={boundedHeight}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             scale={xScale}\n//             tickFormat={(d) => {\n//               return d instanceof Date ? timeFormat(\'%H:%M\')(d) : \'\';\n//             }}\n//             tickLabelProps={() => ({\n//               fill: \'white\',\n//               fontSize: 8,\n//               textAnchor: \'middle\',\n//             })}\n//           />\n//         </Group>\n//       </svg>\n//     </div>\n//   )\n// }\n// export { LineChart }\n// \'use client\'\n// import React, { useMemo, useCallback } from \'react\';\n// import { extent, bisector, max, min } from \'d3-array\';\n// import { timeFormat } from \'d3-time-format\';\n// import { AxisBottom, AxisRight } from \'@visx/axis\';\n// import { LinePath } from \'@visx/shape\';\n// import { Group } from \'@visx/group\';\n// import { scaleLinear, scaleTime } from \'@visx/scale\';\n// import { GridRows } from \'@visx/grid\';\n// import { curveLinear } from \'@visx/curve\';\n// import { useTooltip, TooltipWithBounds } from \'@visx/tooltip\';\n// import { localPoint } from \'@visx/event\';\n// import { data } from \'../data/line-chart\';\n// import { getDimensions, xAccessor, yAccessor } from \'#/utils/line-chart\';\n// type Props = {\n//   width: number;\n//   height: number;\n// };\n// function LineChart({ width, height }: Props) {\n//   const { margin, boundedWidth, boundedHeight } = getDimensions({\n//     width,\n//     height,\n//   });\n//   const LpYValue = 54300.2;\n//   const LatestValue = 59980.9;\n//   const xScale = useMemo(\n//     () =>\n//       scaleTime<number>({\n//         domain: extent(data, xAccessor) as [Date, Date],\n//         range: [0, boundedWidth],\n//         nice: true,\n//       }),\n//     [boundedWidth]\n//   );\n//   const yScale = useMemo(\n//     () =>\n//       scaleLinear<number>({\n//         domain: extent(data, yAccessor) as [number, number],\n//         range: [boundedHeight, 0],\n//         nice: true,\n//       }),\n//     [boundedHeight]\n//   );\n//   const { showTooltip, hideTooltip, tooltipData, tooltipLeft, tooltipTop } = useTooltip();\n//   const handleTooltip = useCallback(\n//     (event: React.MouseEvent) => {\n//       const { x } = localPoint(event) || { x: 0 };\n//       const x0 = xScale.invert(x ); // Correctly handle margin offset\n//       const bisectDate = bisector(xAccessor).left;\n//       const index = bisectDate(data, x0, 1);\n//       const d0 = data[index - 1];\n//       const d1 = data[index];\n//       let d = d0;\n//       if (d1 && xAccessor(d1)) {\n//         d = x0 - xAccessor(d0) > xAccessor(d1) - x0 ? d1 : d0;\n//       }\n//       showTooltip({\n//         tooltipData: d,\n//         tooltipLeft: xScale(xAccessor(d)),\n//         tooltipTop: yScale(yAccessor(d)),\n//       });\n//     },\n//     [xScale, yScale, showTooltip]\n//   );\n//   const customYPosition = yScale(LpYValue);\n//   const yTickValues = yScale.ticks(8);\n//   if (!yTickValues.includes(LpYValue)) yTickValues.push(LpYValue);\n//   if (!yTickValues.includes(LatestValue)) yTickValues.push(LatestValue);\n//   return (\n//     <div className="w-fit">\n//       <svg className="" width={width} height={height} role="figure">\n//         <rect x={0} y={0} width={width} height={height} />\n//         <Group top={margin.top} left={margin.left}>\n//           <GridRows\n//             scale={yScale}\n//             width={boundedWidth}\n//             strokeDasharray="1,3"\n//             stroke="#262626"\n//             pointerEvents="none"\n//           />\n//           <LinePath\n//             curve={curveLinear}\n//             data={data}\n//             stroke={\'#FFCA43\'}\n//             strokeWidth={1.5}\n//             x={(d) => xScale(xAccessor(d)) ?? 0}\n//             y={(d) => yScale(yAccessor(d)) ?? 0}\n//           />\n//           {customYPosition && (\n//             <line\n//               x1={0}\n//               x2={boundedWidth}\n//               y1={customYPosition}\n//               y2={customYPosition}\n//               stroke="white"\n//               strokeWidth={1}\n//               strokeDasharray="3,5"\n//             />\n//           )}\n//           <AxisRight\n//             left={boundedWidth + margin.right - 40}\n//             scale={yScale}\n//             top={0}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             tickValues={yTickValues}\n//             tickFormat={(value) => `${Number(value).toFixed(1)}`}\n//             tickLabelProps={() => ({\n//               fill: \'#A6A6A6\',\n//               fontSize: 9,\n//               textAnchor: \'start\',\n//             })}\n//             tickComponent={({\n//               formattedValue, x, y }) => {\n//                 if (formattedValue === undefined) {\n//                   return null; \n//                 }\n//                 const numFormattedValue = Number(formattedValue); \n//                 const isLPValue = numFormattedValue === LpYValue;\n//                 const isLatestValue = numFormattedValue === LatestValue;\n//                 const text = isLPValue\n//                   ? `LP ${LpYValue.toFixed(1)}`\n//                   : isLatestValue\n//                   ? `${LatestValue.toFixed(1)}`\n//                   : formattedValue;\n//                 const paddingX = 8; \n//                 const paddingY = 2; \n//                 const fontSize = 9;\n//                 const textWidth = text.length * (fontSize * 0.6); // Estimate that each character is ~60% of the font size\n//                 const rectWidth = textWidth + paddingX; // Add padding for width\n//                 const rectHeight = fontSize + paddingY; // Add padding for height\n//                 if (isLPValue) {\n//                   return (\n//                     <g transform={`translate(${x},${y})`}>\n//                       <rect\n//                         x={-rectWidth / 2} \n//                         y={-rectHeight / 2}\n//                         width={rectWidth}\n//                         height={rectHeight}\n//                         fill="#4d4d4d"\n//                         rx={0} \n//                       />\n//                       <text\n//                         fill="white"\n//                         fontSize={fontSize}\n//                         textAnchor="middle"\n//                         dy="0.32em"\n//                         x={0} \n//                       >\n//                         LP {LpYValue.toFixed(1)}\n//                       </text>\n//                     </g>\n//                   );\n//                 } else if (isLatestValue) {\n//                   return (\n//                     <g transform={`translate(${x},${y})`}>\n//                       <rect\n//                         x={-rectWidth / 2} \n//                         y={-rectHeight / 2}\n//                         width={rectWidth}\n//                         height={rectHeight}\n//                         fill="white"\n//                         rx={0} \n//                       />\n//                       <text\n//                         fill="black"\n//                         fontWeight="700"\n//                         fontSize={fontSize}\n//                         textAnchor="middle"\n//                         dy="0.32em"\n//                         x={0}\n//                       >\n//                         {LatestValue.toFixed(1)}\n//                       </text>\n//                     </g>\n//                   );\n//                 } else {\n//                   return (\n//                     <text\n//                       fill="#A6A6A6"\n//                       fontSize={fontSize}\n//                       textAnchor="start"\n//                       dy="0.32em"\n//                       x={-10}\n//                       y={y}\n//                     >\n//                       {text}\n//                     </text>\n//                   );\n//                 }\n//             }}\n//           />\n//           <AxisBottom\n//             rangePadding={41}\n//             top={boundedHeight}\n//             hideAxisLine={true}\n//             hideTicks={true}\n//             scale={xScale}\n//             tickFormat={(d) => (d instanceof Date ? timeFormat(\'%H:%M\')(d) : \'\')}\n//             tickLabelProps={() => ({\n//               fill: \'white\',\n//               fontSize: 8,\n//               textAnchor: \'middle\',\n//             })}\n//           />\n//           <rect\n//             x={0}\n//             y={0}\n//             width={boundedWidth}\n//             height={boundedHeight}\n//             fill="transparent"\n//             onMouseMove={handleTooltip}\n//             onMouseLeave={() => hideTooltip()}\n//           />\n//         </Group>\n//         {tooltipData && (\n//           <circle\n//             cx={tooltipLeft + 14}\n//             cy={tooltipTop + 12 }\n//             r={5}\n//             stroke="black"\n//             fill="#ffcb8f"\n//             strokeWidth={2}\n//             pointerEvents="none"\n//           />\n//         )}\n//       </svg>\n//       {tooltipData && (\n//         <TooltipWithBounds\n//           top={tooltipTop-250}\n//           left={tooltipLeft}\n//           style={{\n//             width: \'120px\',\n//             backgroundColor: \'#4d4d4d\',\n//             color: \'white\',\n//             padding: \'0.5rem\',\n//             borderRadius: \'4px\',\n//             fontSize: \'10px\',\n//           }}\n//         >\n//           <div>Date: {timeFormat(\'%b %d, %Y\')(xAccessor(tooltipData))}</div>\n//           <div>Value: {yAccessor(tooltipData)}</div>\n//         </TooltipWithBounds>\n//       )}\n//     </div>\n//   );\n// }\n// export { LineChart };\n\n\n\n\n\n\n\n\n\n\n\n\nconst tooltipStyles = {\n    ..._visx_tooltip__WEBPACK_IMPORTED_MODULE_3__.defaultStyles,\n    background: "#262626",\n    border: "1px solid white",\n    color: "white"\n};\nfunction LineChart(param) {\n    let { width, height, showTooltip, hideTooltip, tooltipData, tooltipTop, tooltipLeft } = param;\n    _s();\n    const { margin, boundedWidth, boundedHeight } = (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.getDimensions)({\n        width,\n        height\n    });\n    const LpYValue = 54300.2;\n    const LatestValue = 59980.9;\n    const xScale = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(0,_visx_scale__WEBPACK_IMPORTED_MODULE_4__["default"])({\n            domain: (0,d3_array__WEBPACK_IMPORTED_MODULE_5__["default"])(data, _utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor),\n            range: [\n                0,\n                boundedWidth\n            ],\n            nice: true\n        }), [\n        boundedWidth\n    ]);\n    const yScale = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>(0,_visx_scale__WEBPACK_IMPORTED_MODULE_6__["default"])({\n            domain: (0,d3_array__WEBPACK_IMPORTED_MODULE_5__["default"])(data, _utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.yAccessor),\n            range: [\n                boundedHeight,\n                0\n            ],\n            nice: true\n        }), [\n        boundedHeight\n    ]);\n    const bisectDate = (0,d3_array__WEBPACK_IMPORTED_MODULE_7__["default"])((d)=>(0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d)).left;\n    const handleTooltip = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event)=>{\n        const { x } = (0,_visx_event__WEBPACK_IMPORTED_MODULE_8__["default"])(event) || {\n            x: 0\n        };\n        const x0 = xScale.invert(x - margin.left);\n        const index = bisectDate(data, x0, 1);\n        const d0 = data[index - 1];\n        const d1 = data[index];\n        let d = d0;\n        if (d1 && (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d1)) {\n            d = x0.valueOf() - (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d0).valueOf() > (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d1).valueOf() - x0.valueOf() ? d1 : d0;\n        }\n        showTooltip({\n            tooltipData: {\n                x: (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d),\n                y: (0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.yAccessor)(d)\n            },\n            tooltipLeft: x,\n            tooltipTop: yScale((0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.yAccessor)(d))\n        });\n    }, [\n        showTooltip,\n        xScale,\n        yScale,\n        margin.left\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("div", {\n        className: "w-fit",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("svg", {\n            width: width,\n            height: height,\n            role: "figure",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("rect", {\n                    x: 0,\n                    y: 0,\n                    width: width,\n                    height: height,\n                    fill: "transparent"\n                }, void 0, false, {\n                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                    lineNumber: 1073,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("title", {\n                    children: "Line chart showing distribution of values"\n                }, void 0, false, {\n                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                    lineNumber: 1074,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_group__WEBPACK_IMPORTED_MODULE_9__["default"], {\n                    top: margin.top,\n                    left: margin.left,\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_grid__WEBPACK_IMPORTED_MODULE_10__["default"], {\n                            scale: yScale,\n                            width: boundedWidth,\n                            strokeDasharray: "1,3",\n                            stroke: "#262626",\n                            pointerEvents: "none"\n                        }, void 0, false, {\n                            fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                            lineNumber: 1076,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_shape__WEBPACK_IMPORTED_MODULE_11__["default"], {\n                            curve: _visx_curve__WEBPACK_IMPORTED_MODULE_12__["default"],\n                            data: data,\n                            stroke: "#FFCA43",\n                            strokeWidth: 1.5,\n                            x: (d)=>{\n                                var _xScale;\n                                return (_xScale = xScale((0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.xAccessor)(d))) !== null && _xScale !== void 0 ? _xScale : 0;\n                            },\n                            y: (d)=>{\n                                var _yScale;\n                                return (_yScale = yScale((0,_utils_line_chart__WEBPACK_IMPORTED_MODULE_2__.yAccessor)(d))) !== null && _yScale !== void 0 ? _yScale : 0;\n                            }\n                        }, void 0, false, {\n                            fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                            lineNumber: 1077,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_shape__WEBPACK_IMPORTED_MODULE_13__["default"], {\n                            x: 0,\n                            y: 0,\n                            width: boundedWidth,\n                            height: boundedHeight,\n                            fill: "transparent",\n                            onMouseMove: handleTooltip,\n                            onMouseLeave: hideTooltip\n                        }, void 0, false, {\n                            fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                            lineNumber: 1085,\n                            columnNumber: 11\n                        }, this),\n                        tooltipData && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("g", {\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)("circle", {\n                                    cx: tooltipLeft,\n                                    cy: tooltipTop,\n                                    r: 4,\n                                    fill: "white"\n                                }, void 0, false, {\n                                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                                    lineNumber: 1096,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_tooltip__WEBPACK_IMPORTED_MODULE_14__["default"], {\n                                    top: tooltipTop - 12,\n                                    left: tooltipLeft + 12,\n                                    style: tooltipStyles,\n                                    children: "Y Value: ".concat(tooltipData.y.toFixed(2))\n                                }, Math.random(), false, {\n                                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                                    lineNumber: 1097,\n                                    columnNumber: 15\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_visx_tooltip__WEBPACK_IMPORTED_MODULE_14__["default"], {\n                                    top: boundedHeight + margin.top - 12,\n                                    left: tooltipLeft,\n                                    style: tooltipStyles,\n                                    children: "Date: ".concat((0,d3_time_format__WEBPACK_IMPORTED_MODULE_15__.timeFormat)("%b %d, %Y")(tooltipData.x))\n                                }, Math.random(), false, {\n                                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                                    lineNumber: 1100,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                            lineNumber: 1095,\n                            columnNumber: 13\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n                    lineNumber: 1075,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n            lineNumber: 1072,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: "/Users/aluaorazbek/Desktop/charts/src/components/line-chart.tsx",\n        lineNumber: 1071,\n        columnNumber: 5\n    }, this);\n}\n_s(LineChart, "7mlZ5+yjidC/0PpUnFy3WfOdW68=");\n_c = LineChart;\n/* harmony default export */ __webpack_exports__["default"] = (_c1 = (0,_visx_tooltip__WEBPACK_IMPORTED_MODULE_16__["default"])(LineChart));\nvar _c, _c1;\n$RefreshReg$(_c, "LineChart");\n$RefreshReg$(_c1, "%default%");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we\'re in a\n        // browser context before continuing.\n        if (typeof self !== \'undefined\' &&\n            // AMP / No-JS mode does not inject these helpers:\n            \'$RefreshHelpers$\' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we\'ll check if it\'s\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we\'ll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it\'s possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/line-chart.tsx\n',
        ),
      );

      /***/
    },
});
